{"version":3,"sources":["../../src/utils.js","../../src/PositionTracker.js","../../src/ScrollPosition.js","../../src/timer.js","../../src/domHelpers.js","../../src/ErrBoundary.js","../../src/MeasuredGrid.js","../../src/quotes.js","../../src/pairedQuotes.js","QuoteGrid.js","App.js","index.js"],"names":["isFiniteNumber","value","isFinite","isBetween","low","high","isFiniteNumberBetween","show","maxDepth","qdmShow","depth","Array","items","prevIndex","increment","index","item","_Node","measuredSize","unmeasuredCount","lastAccumulatedIndex","unmeasuredSize","this","sizeDelta","branchIndex","children","PositionTracker","itemCount","lowSize","maxBranches","maxLeafItems","Math","_itemCount","capacitiesResult","_calculateBranchCapacities","_setItemSize","size","offset","totalSize","_getContainingIndex","getItemMeasuredSize","_lowSize","_getItemMeasuredSize","itemStats","_getItemStats","start","end","isMeasured","_rootNode","getTotalSize","newBranchCapacities","newRootLevel","oldSize","newItemCount","branchCapacities","lowerNode","lix","nbrMeasuredInLower","newUnmeasuredCount","level","capacity","node","newIndex","oldIndex","nodeCapacity","_branchCapacities","branchCapacity","oldBranchIndex","oldNextIndex","newBranchIndex","newNextIndex","branchesPerNode","unmeasuredCountDelta","newExtendedNextIndex","nextNode","_expandNodes","branchStats","branch","nextIndex","stats","maxRemainderIndex","containingBranchIndex","containingBranchStart","highIndex","highStart","lowIndex","lowStart","middleIndex","middleStart","branchStart","sumMeasuredSize","sumUnmeasuredCount","nextMaxRemainderIndex","_getBranchStats","branchEnd","_getBranchSize","resultIndex","branchTreeIndex","notANode","lastIndex","bix","rawSize","nextIndex2","branchNode","nodeOldNextIndex","subtreeDelta","_reduceNodes","capacityCap","child","Number","priorCapacity","nextCapacityCap","ScrollPosition","alignment","indexOf","positionTracker","viewSize","totalOffset","getTotalOffset","newPosition","newTotalOffset","originalAlignment","viewDelta","offsetDelta","_alignment","rawTotalOffset","isNaN","_offset","scrollPosition","containingIndex","now","performance","Date","cancelTimeout","timeoutID","ErrBoundary","hasError","error","info","state","props","React","Component","defaultItemKey","MeasuredGrid","rowCount","columnCount","rowPosition","rowItemCount","columnPosition","columnItemCount","viewHeight","viewWidth","gridContainers","_resetIsScrollingTimeoutId","isScrolling","_viewDimensions","newColumnPosition","newRowPosition","itemKey","viewClassName","viewStyle","rowTracker","columnTracker","columnStartIndex","columnStopIndex","_getRowRangeToRender","innerHeight","renderRowStart","renderRowStop","useDataArray","rows","viewDimensionStyle","width","height","rowIndex","cells","columnIndex","cellStyle","cellColumnStyle","_columnStyleFunction","cellStyleWidth","_columnWidthFunction","cellClassName","_columnClassNameFunction","cellKey","_childrenFromDataArray","cell","rowKey","row","boxSizing","key","startRowOffset","baseStyle","fullViewStyle","Object","result","evt","_totalWidth","domView","domBase","viewScrollLeft","maxGridOffset","viewLeftGridOffset","newWidth","domRendered","viewScrollTop","firstRenderedIndex","_renderedRowRange","firstRenderedRowStats","lastRenderedRow","lastRenderedRowStats","totalHeight","viewTopGridOffset","viewBottomGridOffset","adjustedRenderedRowsTop","newTop","nbrRowItems","_columnClassNameSaved","_makeClassNameFunction","_columnStyleSaved","_makeStyleFunction","_columnWidthSaved","_makeWidthFunction","dataArray","rowData","cellData","String","_getDomRef","_columnTracker","ref","scrollDelta","newAlignment","referencePosition","realignedPosition","overscanRowCount","overscanRowCountNbr","_getVisibleRowRange","_visibleRowRange","totalWidth","cellWidth","scrollbarSize","recalculate","div","document","style","getScrollbarSize","viewRect","_rowTracker","verticalScrollbarSize","horizontalScrollbarSize","otherUnusedHeight","otherUnusedWidth","window","_getStyleSize","name","parsed","parseFloat","viewTop","viewBottom","rootIndex","rootStats","visibleRange","startIndex","startBottom","endIndex","endTop","rangeHeight","className","classFunction","raw","styleFunction","widthFunction","measuredRow","cix","cellRect","measuredWidth","givenCellWidth","rix","rowRect","rowHeight","calculatedScrollLeft","calculatedScrollTop","scrollLeft","scrollTop","isNeeded","newViewTop","renderedRowStartOffset","renderedRowEndOffset","nextProps","prevState","that","nbrRows","rowResult","nbrColumns","columnResult","defaultProps","_gridbaseRef","_isMounted","_lastScrollTop","_lastScrollLeft","_renderedRef","_viewRef","_onResize","newViewDimensions","_onScroll","event","clientHeight","clientWidth","scrollHeight","scrollWidth","_resetIsScrolling","_resetIsScrollingDebounced","callback","requestAnimationFrame","call","requestTimeout","quotes","pickOneInWindow","windowBase","windowLength","shiftBy","pickState","choiceIndex","chosen","getPairedQuotes","quotesCopy","prstate","seqNbr","item2","errorStyle","backgroundColor","QuoteGrid","columns","gridCell","quoteData","nbrRowsOK","quoteExWidth","quoteExWidthUsed","quoteExWidthOK","rowIndexOK","alignmentOK","rowOffset","rowOffsetOK","message","gridRef","createRef","length","isInteger","maxNbrRows","validateNbrRows","validateQuoteExWidth","message2","setItemCount","setState","validateRowIndex","validateRowOffset","current","positionAt","audit","target","title","id","maxWidth","marginBottom","marginTop","substr","toUpperCase","visibility","onClick","dataResize","onChange","onChangeNbrRows","onChangeQuoteExWidth","onChangeRowIndex","onChangeAlignment","onChangeRowOffset","columnClassName","columnPositionInitial","columnWidth","rowPositionInitial","viewId","App","href","ReactDOM","render","getElementById"],"mappings":"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","file":"main.js","sourcesContent":["// Copyright (c) 2020, David Cary, MIT License\n\nexport const DBG = 5;\nexport function PDBG(msg) {\n  console.debug(elapsed()+': '+msg);\n}\nexport const DBGPS = 3;\nexport const DBGPS_DEPTH = 1;\nexport const DBG_NO_DIDX = false; //To inspect interim DOM\nexport const DBG_SHOW_JSON = false;\n\nexport function isFiniteNumber(value) {\n  return typeof value === 'number' && isFinite(value);\n}\n\nexport function isBetween(value, low, high) {\n  return value >= low && value <= high;\n}\n\nexport function isFiniteNumberBetween(value, low, high) {\n  return typeof value === 'number' && isFinite(value) &&\n        value >= low && value <= high;\n}\n\nconst _startTime = Date.now();\nexport function elapsed() {\n  const now = Date.now();\n  const elapsedMs = now - _startTime;\n  const result = (elapsedMs / 1000).toFixed(3);\n  return result;\n}\n\nexport function TS(msg) {\n  const result = elapsed()+': '+String(msg);\n  return result;\n}\n\nexport function show(value, maxDepth) {\n  const result = maxDepth <= 0 ? '' : qdmShow(value, 0, maxDepth);\n  return result;\n}\n\nexport function showx(value, maxDepth) {\n  return DBG_SHOW_JSON ? JSON.stringify(value) : show(value, maxDepth);\n}\n\nfunction qdmShow(value, depth, maxDepth) {\n  let result = '';\n  if (typeof value == 'string') {\n    return '\"' + value + '\"';\n  }\n  if (typeof value == 'number') {\n    return '' + value;\n  }\n  if (typeof value == 'boolean') {\n    return value ? 'true' : 'false';\n  }\n  if (typeof value == 'undefined') {\n    return '<undefined>';\n  }\n  if (value === null) {\n    return '<null>';\n  }\n  if (typeof value == 'function') {\n    return '<function>';\n  }\n  if (Array.isArray(value)) {\n    if (maxDepth && depth === maxDepth) {\n      return '<object>';\n    }\n    let items = []\n    let prevIndex = -1;\n    for (let index in value) {\n      const increment = index - prevIndex;\n      if (increment > 1) {\n        items.push('<skip '+(increment - 1)+'>');\n      }\n      items.push(qdmShow(value[index], depth + 1, maxDepth));\n      prevIndex = index;\n    }\n    const result = '[' + items.join(', ') + ']';\n    return result;\n  }\n  if (typeof value == 'object') {\n    if (maxDepth && depth === maxDepth) {\n      return '<object>';\n    }\n    let result = '{';\n    let items = [];\n    for (let key in value) {\n      let item = qdmShow(key, depth + 1, maxDepth) + ': ' +\n            qdmShow(value[key], depth + 1, maxDepth);\n      items.push(item);\n    }\n    result = '{'+items.join(', ') + '}';\n    return result;\n  }\n  result = '<unknown ' + (typeof value) + '>';\n  return result;\n}\n  \nexport function diffObjects(obj1, obj2) {\n  const result = {isEqual: true, only1: {}, only2: {}, valuesDiffer: {}};\n  if (obj1 === null || typeof obj1 != 'object' ||\n        obj2 === null || typeof obj2 != 'object') {\n    result.isEqual = null;\n    return result;\n  }\n  let key;\n  for (key in obj1) {\n    if (key in obj2) {\n      if (obj1[key] !== obj2[key]) {\n        result.valuesDiffer[key] = {value1: obj1[key], value2: obj2[key]};\n        result.isEqual = false;\n      }\n    } else {\n      result.only1[key] = obj1[key];\n      result.isEqual = false;\n    }\n  }\n  for (key in obj2) {\n    if (!(key in obj1)) {\n      result.only2[key] = obj2[key];\n      result.isEqual = false;\n    }\n  }\n  return result;\n}\n\nvar qdmPrevProps = null;\nvar qdmPrevState = null;\nfunction showDiff(diff) {\n  const result =\n        diff.isEqual ? '' :\n        '{isEqual: '+show(diff.isEqual)+\n        (Object.keys(diff.only1).length ? ', only1: '+show(diff.only1, 1) : '')+\n        (Object.keys(diff.only2).length ? ', only2: '+show(diff.only2, 1) : '')+\n        (Object.keys(diff.valuesDiffer).length ?\n          ', valuesDiffer: '+show(diff.valuesDiffer, 2) : '')+\n        '}';\n  return result;\n}\nexport function showPropsCompare(props) {\n  const diff = diffObjects(props, qdmPrevProps);\n  const result = showDiff(diff);\n  qdmPrevProps = props;\n  return result;\n}\nexport function showStateCompare(state) {\n  const diff = diffObjects(state, qdmPrevState);\n  const result = showDiff(diff);\n  qdmPrevState = state;\n  return result;\n}\n  \n\n","// @flow\n\nimport {isFiniteNumber, isBetween, isFiniteNumberBetween} from './utils';\n\ntype BranchStats = {|\n  measuredSize: number,\n  unmeasuredCount: number,\n\n|};\n\ntype Children = _Node | number | null;\n\nclass _Node {\n  measuredSize: number = 0;\n  unmeasuredCount: number = 0;\n  lastAccumulatedIndex = 0;\n  sumMeasuredSize: Array<number | null>;\n  sumUnmeasuredCount: Array<number | null>;\n  children: Array<Children>;\n\n  constructor(unmeasuredCount: number, maxChildren: number) {\n    this.unmeasuredCount = unmeasuredCount;\n    this.sumMeasuredSize = Array(maxChildren).fill(0);\n    this.sumUnmeasuredCount = Array(maxChildren).fill(0);\n    this.children = Array(maxChildren).fill(null);\n  }\n\n  getTotalSize(unmeasuredSize: number) {\n    const totalSize = this.measuredSize +\n          this.unmeasuredCount * unmeasuredSize;\n    return totalSize;\n  }\n\n  updateBranchSums(sizeDelta: SizeDelta, branchIndex: number) {\n    if (branchIndex < 0 || branchIndex >= this.children.length ||\n          this.lastAccumulatedIndex < branchIndex ||\n          (sizeDelta.measuredSize === 0 && sizeDelta.unmeasuredCount === 0)) {\n      return;\n    }\n    this.sumMeasuredSize[branchIndex] += sizeDelta.measuredSize;\n    this.sumUnmeasuredCount[branchIndex] += sizeDelta.unmeasuredCount;\n    this.lastAccumulatedIndex = branchIndex;\n  }      \n\n}\n\nconst _private = {_Node}\nexport {_private};\n\ntype SizeDelta = {\n  measuredSize: number,\n  oldSize: number | null,\n  size: number | null,\n  unmeasuredCount: number,\n};\n\nexport type ItemStats = {\n  end: number,\n  isMeasured: boolean,\n  size: number,\n  start: number,\n};\n\n// Default values\nconst DEFAULT_LOW_SIZE = 12;\nconst DEFAULT_UNMEASURED_SIZE = 18;\nconst DEFAULT_MAX_BRANCHES = 32;\nconst DEFAULT_MAX_LEAF_ITEMS = 32;\n\n//Limits\nconst MIN_LOW_SIZE = 5;\nconst MIN_UNMEASURED_SIZE = 5;\nconst MAX_MAX_BRANCHES = 1024;\nconst MIN_MAX_BRANCHES = 2;\nconst MAX_MAX_LEAF_ITEMS = 1024;\nconst MIN_MAX_LEAF_ITEMS = 2;\nconst MAX_ITEM_COUNT = 134217727;  // = (2 ** 27) - 1; about 134 million;\nconst MAX_SIZE = 16777215; // = (2 ** 24) - 1; about 16 million;\n\nclass PositionTracker {\n  _rootNode: _Node;\n  _itemCount: number;\n  _maxIndex: number;\n  _lowSize: number | (index: number)=>number;\n  _unmeasuredSize: number;\n  _maxBranches: number\n  _maxLeafItems: number;\n  _branchCapacities: Array<number>;\n  _rootLevel: number;\n\n  constructor(\n    itemCount: number =0,\n    unmeasuredSize: number,\n    lowSize: number | (index: number)=>number,\n    maxBranches: number,\n    maxLeafItems: number\n  ) {\n    //super();\n    if (isFiniteNumberBetween(itemCount, 0, MAX_ITEM_COUNT)) {\n      this._itemCount = Math.trunc(itemCount);\n    } else {\n      this._itemCount = 0;\n    }\n    this._maxIndex = this._itemCount ? this._itemCount - 1 : 0;\n    this.setUnmeasuredSize(unmeasuredSize);\n    this.setLowSize(lowSize);\n    if (isFiniteNumberBetween(\n          maxBranches, MIN_MAX_BRANCHES, MAX_MAX_BRANCHES)) {\n      this._maxBranches = Math.trunc(maxBranches);\n    } else {\n      this._maxBranches = DEFAULT_MAX_BRANCHES;\n    }\n    if (isFiniteNumberBetween(maxLeafItems, MIN_MAX_LEAF_ITEMS,\n          MAX_MAX_LEAF_ITEMS)) {\n      this._maxLeafItems = Math.trunc(maxLeafItems);\n    } else {\n      this._maxLeafItems = DEFAULT_MAX_LEAF_ITEMS;\n    }\n    this.clearAllItems();\n  }\n\n  clearAllItems() {\n    this._rootNode = new _Node(this._itemCount, this._maxBranches);\n    let capacitiesResult = \n      this._calculateBranchCapacities(\n        this._itemCount,\n        this._maxBranches,\n        this._maxLeafItems\n      );\n    this._branchCapacities = capacitiesResult[0];\n    this._rootLevel = capacitiesResult[1];\n  }\n\n  clearItemSize(index: number): number | null {\n    let sizeDelta: SizeDelta;\n    if (isFiniteNumberBetween(index, 0, this._itemCount - 1)\n          && Math.trunc(index) === index) {\n      sizeDelta = this._setItemSize(this._rootNode, index, this._rootLevel,\n            null, this._itemCount);\n    } else {\n      sizeDelta = {\n            oldSize: 0, size: null, measuredSize: 0, unmeasuredCount: 0};\n    }\n    return sizeDelta.oldSize;\n  }\n\n  getContainingIndex(offset: number): number {\n    let index = 0;\n    if (isFiniteNumber(offset) && this._itemCount > 0) {\n      const totalSize = this.getTotalSize();\n      if (isBetween(offset, 0, totalSize)) {\n        index = this._getContainingIndex(this._rootNode, offset,\n            this._itemCount - 1, this._rootLevel);\n      } else if (offset > totalSize) {\n        index = this._maxIndex;\n      } \n    }\n    index = Math.max(0, Math.min(this._maxIndex, index));\n    return index;\n  }\n\n  getItemCount(): number {\n    return this._itemCount;\n  }\n\n  getItemLowSize(index: number): number {\n    let size = this.getItemMeasuredSize(index);\n    if (size === null) {\n      if (typeof this._lowSize === 'number') {\n        size = this._lowSize;        \n      } else {\n        size = this._lowSize(index);\n      }\n    }\n    return size;\n  }\n\n  getItemMeasuredSize(index: number): number | null {\n    let measuredSize: number | null = 0;\n    if (isFiniteNumberBetween(index, 0, this._itemCount - 1)\n          && Math.trunc(index) === index) {\n      measuredSize = this._getItemMeasuredSize(this._rootNode, index,\n            this._rootLevel);\n    }\n    return measuredSize;\n  }\n\n  getItemSize(index: number): number {\n    let size = this.getItemMeasuredSize(index);\n    if (size === null) {\n      size = this.getUnmeasuredSize();\n    }\n    return size;\n  }\n\n  getItemStats(index: number): ItemStats {\n    let itemStats: ItemStats;\n    if (isFiniteNumber(index)) {\n      index = Math.trunc(index);\n      if (isBetween(index, 0, this._itemCount - 1)) {\n        itemStats = this._getItemStats(this._rootNode, index,\n            this._rootLevel);\n        itemStats.end = itemStats.start + itemStats.size;\n      } else if (index < 0) {\n        itemStats = {start: 0, size: 0, end: 0, isMeasured: true}\n      } else {\n        const totalSize = this.getTotalSize();\n        itemStats = {start: totalSize, size: 0, end: totalSize,\n              isMeasured: true}\n      }\n    } else {\n      itemStats = {start: 0, size: 0, end: 0, isMeasured: true}\n    }\n    return itemStats;\n  }\n\n  getLowSize(): number | (index: number)=>number {\n    return this._lowSize;\n  }\n\n  getMaxBranches(): number {\n    return this._maxBranches;\n  }\n\n  getMaxLeafItems(): number {\n    return this._maxLeafItems;\n  }\n\n  getTotalSize(): number {\n    const result = this._rootNode.getTotalSize(this.getUnmeasuredSize());\n    return result;\n  }\n\n  getUnmeasuredSize(): number {\n    let result = this._unmeasuredSize;\n    return result;\n  }\n\n  setItemCount(itemCount: number) {\n    itemCount = Math.trunc(itemCount);\n    if (!isFiniteNumberBetween(itemCount, 0, MAX_ITEM_COUNT) ||\n          itemCount === this._itemCount) {\n      return;\n    }\n    if (itemCount === 0) {\n      this._itemCount = 0;\n      this._maxIndex = 0;\n      this.clearAllItems();\n      return;\n    }\n    const [newBranchCapacities, newRootLevel] = this._calculateBranchCapacities(\n          itemCount, this._maxBranches, this._maxLeafItems);\n    if (itemCount < this._itemCount) {\n      this._reduceNodes(this._rootNode, itemCount - 1, this._itemCount - 1,\n            this._rootLevel);\n      this._releaseUnusedLevels(itemCount, newRootLevel);\n    } else {\n      this._expandNodes(this._rootNode, itemCount - 1, this._itemCount - 1,\n            this._rootLevel);\n      this._addNewLevels(itemCount, newRootLevel, newBranchCapacities);\n    }\n    this._itemCount = itemCount;\n    this._maxIndex = this._itemCount - 1;\n    this._branchCapacities = newBranchCapacities;\n    this._rootLevel = newRootLevel;\n  }\n\n  setItemSize(index: number, size: number | null): number | null {\n    let sizeDelta: SizeDelta;\n    if (isFiniteNumberBetween(index, 0, this._itemCount - 1)\n          && Math.trunc(index) === index &&\n          (isFiniteNumberBetween(size, 0, MAX_SIZE) || size === null)) {\n      sizeDelta = this._setItemSize(this._rootNode, index, this._rootLevel,\n            size, this._itemCount);\n    } else {\n      sizeDelta = {oldSize: 0, size, measuredSize: 0, unmeasuredCount: 0};\n    }\n    return sizeDelta.oldSize;\n  }\n\n  setLowSize(lowSize: number | (index: number)=>number): void {\n    if (isFiniteNumberBetween(lowSize, MIN_LOW_SIZE, this._unmeasuredSize) ||\n          typeof lowSize === 'function') {\n      this._lowSize = lowSize;\n    } else {\n      this._lowSize = DEFAULT_LOW_SIZE;\n    }\n  }\n\n  setUnmeasuredSize(unmeasuredSize: number): void {\n    if (isFiniteNumberBetween(unmeasuredSize, MIN_UNMEASURED_SIZE,\n          MAX_SIZE)) {\n      this._unmeasuredSize = unmeasuredSize;\n    } else {\n      this._unmeasuredSize = DEFAULT_UNMEASURED_SIZE;\n    }\n  }\n  \n  // Start of private methods\n\n  _addNewLevels(newItemCount: number, newRootLevel: number, branchCapacities: Array<number>) {\n    let lowerNode = this._rootNode;\n    for (let lix = this._rootLevel; lix < newRootLevel; lix++) {\n      const nbrMeasuredInLower = branchCapacities[lix + 1] - lowerNode.unmeasuredCount;\n      const newUnmeasuredCount = Math.min(\n            newItemCount, branchCapacities[lix + 2]) - nbrMeasuredInLower;\n      this._rootNode = new _Node(newUnmeasuredCount, this._maxBranches);\n      this._rootNode.measuredSize = lowerNode.measuredSize;\n      this._rootNode.children[0] = lowerNode;\n      lowerNode = this._rootNode;\n    }\n  }\n\n  _calculateBranchCapacities(\n    itemCount: number,\n    maxBranches: number,\n    maxLeafItems: number\n  ): [Array<number>, number] {\n    const branchCapacities = [];\n    branchCapacities[0] = 1;\n    branchCapacities[1] = maxLeafItems;\n    branchCapacities[2] = maxLeafItems * maxBranches;\n    let level = 2;\n    let capacity = branchCapacities[2]\n    while (capacity < itemCount) {\n      capacity *= maxBranches;\n      branchCapacities[++level] = capacity;\n    }\n    return [branchCapacities, level - 1];\n  }\n\n  _expandNodes(\n    node: _Node, newIndex: number, oldIndex: number, level: number\n  ): SizeDelta {\n    const nodeCapacity = this._branchCapacities[level+1];\n    if (newIndex >= nodeCapacity) {\n      newIndex = nodeCapacity - 1;\n    }\n    const branchCapacity = this._branchCapacities[level];\n    const oldBranchIndex = Math.trunc(oldIndex / branchCapacity);\n    const oldNextIndex = oldIndex - oldBranchIndex * branchCapacity;\n    let newBranchIndex = Math.trunc(newIndex / branchCapacity);\n    let newNextIndex = newIndex - newBranchIndex * branchCapacity;\n    const sizeDelta = {measuredSize: 0, unmeasuredCount: 0, size: null, oldSize: null};\n    const branchesPerNode = level === 0 ?\n          this._maxLeafItems : this._maxBranches;\n    if (newBranchIndex >= branchesPerNode) {\n      newBranchIndex = branchesPerNode - 1;\n      newNextIndex = branchCapacity - 1;\n    }\n    const unmeasuredCountDelta = (newNextIndex - oldNextIndex) +\n          (newBranchIndex - oldBranchIndex) * branchCapacity;\n    const newExtendedNextIndex = unmeasuredCountDelta + oldNextIndex;\n          \n    sizeDelta.unmeasuredCount += unmeasuredCountDelta;\n    node.unmeasuredCount += sizeDelta.unmeasuredCount;\n    if (level > 0) {\n      const nextNode = node.children[oldBranchIndex];\n      if (nextNode instanceof _Node) {\n        const subtreeDelta = this._expandNodes(\n              nextNode, newExtendedNextIndex, oldNextIndex, level - 1);\n      }\n    }\n    return sizeDelta;\n  }\n  \n  _getBranchSize(branchStats: BranchStats) {\n    const size = branchStats.measuredSize +\n          branchStats.unmeasuredCount * this._unmeasuredSize;\n    return size;\n  }\n\n  _getBranchStats(branch: _Node | number | null,\n        branchCapacity: number, nextIndex: number): BranchStats {\n    let stats = {measuredSize: 0, unmeasuredCount: 0};\n    if (branch === null) {\n      stats.unmeasuredCount = Math.min(nextIndex, branchCapacity);\n    } else if (typeof branch === 'number') {\n      stats.measuredSize = branch;\n    } else {\n      stats.measuredSize = branch.measuredSize;\n      stats.unmeasuredCount = branch.unmeasuredCount;\n    }\n    return stats;\n  }\n\n  _getContainingIndex(\n    node: _Node, \n    offset: number,\n    maxRemainderIndex: number,\n    level: number\n  ): number {\n    let containingBranchIndex: number = 0;\n    let containingBranchStart: number = 0;\n    const branchCapacity = this._branchCapacities[level];\n    let highIndex = node.lastAccumulatedIndex;\n    let highStart = (node.sumMeasuredSize[highIndex] || 0) +\n          (node.sumUnmeasuredCount[highIndex] || 0) * this._unmeasuredSize;\n    let lowIndex = 0;\n    let lowStart = 0;\n    if (offset < highStart) {\n      while (lowIndex + 1 < highIndex) {\n        let middleIndex = Math.trunc((lowIndex + highIndex) / 2);\n        let middleStart = (node.sumMeasuredSize[middleIndex] || 0) +\n              (node.sumUnmeasuredCount[middleIndex] || 0) * this._unmeasuredSize;\n        if (offset < middleStart) {\n          highIndex = middleIndex;\n          highStart = middleStart;\n        } else {\n          lowIndex = middleIndex;\n          lowStart = middleStart;\n        }\n      }\n      containingBranchIndex = lowIndex;\n      containingBranchStart = lowStart;\n    } else {\n      let branchIndex = highIndex;\n      let branchStart = highStart;\n      let sumMeasuredSize = node.sumMeasuredSize[branchIndex];\n      let sumUnmeasuredCount = node.sumUnmeasuredCount[branchIndex];\n      let nextMaxRemainderIndex = maxRemainderIndex - branchIndex * branchCapacity;\n      while (offset >= branchStart && nextMaxRemainderIndex >= 0) {\n        let branchStats = this._getBranchStats(node.children[branchIndex],\n              branchCapacity, nextMaxRemainderIndex);\n        let branchSize = this._getBranchSize(branchStats);\n        let branchEnd = branchStart + branchSize;\n        if (branchIndex > node.lastAccumulatedIndex) {\n          node.sumMeasuredSize[branchIndex] = sumMeasuredSize;\n          node.sumUnmeasuredCount[branchIndex] = sumUnmeasuredCount;\n          node.lastAccumulatedIndex = branchIndex;\n        }\n        sumMeasuredSize += branchStats.measuredSize;\n        sumUnmeasuredCount += branchStats.unmeasuredCount;\n        if (offset < branchEnd || nextMaxRemainderIndex < branchCapacity ||\n              branchIndex + 1 === node.children.length) {\n          break;\n        }\n        branchIndex++;\n        branchStart = branchEnd;\n        nextMaxRemainderIndex -= branchCapacity;\n      }\n      containingBranchIndex = branchIndex;\n      containingBranchStart = branchStart;\n    }\n    let resultIndex = containingBranchIndex * branchCapacity;\n    let branchTreeIndex: number;\n    if (level === 0) {\n      branchTreeIndex = 0;\n    } else {\n      let nextNode = node.children[containingBranchIndex];\n      if (nextNode instanceof _Node) {\n        let nextMaxRemainderIndex = maxRemainderIndex - resultIndex;\n        branchTreeIndex = this._getContainingIndex(nextNode,\n              offset - containingBranchStart, nextMaxRemainderIndex, level - 1);\n      } else {\n        branchTreeIndex = Math.trunc(\n              (offset - containingBranchStart) / this._unmeasuredSize);\n      }\n    }\n    resultIndex += branchTreeIndex;\n    return resultIndex;\n  }\n\n  _getItemMeasuredSize(\n    node: _Node, \n    index: number, \n    level: number\n  ): number | null {\n    let measuredSize: number | null;\n    if (level === 0) {\n      const notANode = node.children[index];\n      measuredSize = notANode instanceof _Node ? null : notANode;\n    } else {\n      const branchCapacity = this._branchCapacities[level];\n      const branchIndex = Math.trunc(index / branchCapacity);\n      const priorCapacity = branchIndex * branchCapacity;\n      const nextIndex = index - priorCapacity;\n      let nextNode = node.children[branchIndex];\n      if (typeof nextNode === 'number' || nextNode === null) {\n        measuredSize = null;\n      } else {\n        measuredSize = this._getItemMeasuredSize(\n              nextNode, nextIndex, level - 1);\n      }\n    }\n    return measuredSize;\n  }\n            \n  _getItemStats(\n    node: _Node, \n    index: number, \n    level: number\n  ): ItemStats {\n    let itemStats: ItemStats;\n    const unmeasuredSize = this._unmeasuredSize;\n    const lastIndex = node.lastAccumulatedIndex;\n    if (level === 0) {\n      if (index > lastIndex) {\n        let sumMeasuredSize: number = (node.sumMeasuredSize[lastIndex] || 0);\n        let sumUnmeasuredCount: number = (node.sumUnmeasuredCount[lastIndex] || 0);\n        for (let bix = lastIndex; bix <= index; bix++) {\n          if (bix > node.lastAccumulatedIndex) {\n            node.sumMeasuredSize[bix] = sumMeasuredSize;\n            node.sumUnmeasuredCount[bix] = sumUnmeasuredCount;\n            node.lastAccumulatedIndex = bix;\n          }\n          const measuredSize = node.children[bix];\n          if (measuredSize === null) {\n            sumUnmeasuredCount++;\n          } else if (typeof measuredSize === 'number') {\n            sumMeasuredSize += measuredSize;\n          }\n        }\n      }\n      const start: number = (node.sumMeasuredSize[index] || 0) +\n            (node.sumUnmeasuredCount[index] || 0) * unmeasuredSize;\n      const rawSize = node.children[index];\n      const isMeasured = isFiniteNumber(rawSize);\n      const size = isMeasured && typeof rawSize === 'number' ?\n            rawSize : unmeasuredSize;\n      itemStats = {start, size, end: 0, isMeasured};\n    } else {\n      const branchCapacity = this._branchCapacities[level];\n      const branchIndex = Math.trunc(index / branchCapacity);\n      const priorCapacity = branchIndex * branchCapacity;\n      const nextIndex = index - priorCapacity;\n      if (branchIndex > lastIndex) {\n        let sumMeasuredSize: number = (node.sumMeasuredSize[lastIndex] || 0);\n        let sumUnmeasuredCount: number = (node.sumUnmeasuredCount[lastIndex] || 0);\n        let nextIndex2 = index - lastIndex * branchCapacity;\n        for (let bix = lastIndex + 1; bix <= branchIndex; bix++) {\n          const nextNode = node.children[bix - 1];\n          const branchStats = this._getBranchStats(nextNode, branchCapacity,\n                nextIndex2);\n          sumMeasuredSize += branchStats.measuredSize;\n          sumUnmeasuredCount += branchStats.unmeasuredCount;\n          node.sumMeasuredSize[bix] = sumMeasuredSize;\n          node.sumUnmeasuredCount[bix] = sumUnmeasuredCount;\n          nextIndex2 -= branchCapacity;\n        }\n        node.lastAccumulatedIndex = branchIndex;\n      }\n      const nextNode = node.children[branchIndex];\n      const branchStart:number = (node.sumMeasuredSize[branchIndex] || 0) +\n            (node.sumUnmeasuredCount[branchIndex] || 0) * unmeasuredSize;\n      if (typeof nextNode === 'number' || nextNode === null) {\n        const start = unmeasuredSize * nextIndex;\n        itemStats = {start, size: unmeasuredSize,\n              end: 0, isMeasured: false};\n      } else {\n        itemStats = this._getItemStats(nextNode, nextIndex, level - 1);\n      }\n      itemStats.start += branchStart;\n    }\n    return itemStats;\n  }\n            \n  _reduceNodes(\n    node: _Node, newIndex: number, oldIndex: number, level: number\n  ): SizeDelta {\n    const branchCapacity = this._branchCapacities[level];\n    const newBranchIndex = Math.trunc(newIndex / branchCapacity);\n    const newNextIndex = newIndex - newBranchIndex * branchCapacity;\n    const oldBranchIndex = Math.trunc(oldIndex / branchCapacity);\n    const oldNextIndex = oldIndex - oldBranchIndex * branchCapacity;\n    const sizeDelta = {measuredSize: 0, unmeasuredCount: 0, size: null, oldSize: null};\n    if (level === 0) {\n      for (let bix = newBranchIndex + 1; bix <= oldBranchIndex; bix++) {\n        const measuredSize = node.children[bix];\n        if (typeof measuredSize === 'number') {\n          sizeDelta.measuredSize -= measuredSize;\n          node.children[bix] = null;\n        } else {\n          sizeDelta.unmeasuredCount--;\n        }\n      }\n    } else {\n      for (let bix = newBranchIndex + 1; bix <= oldBranchIndex; bix++) {\n        const branchNode = node.children[bix];\n        if (branchNode instanceof _Node) {\n          sizeDelta.measuredSize -= branchNode.measuredSize;\n          sizeDelta.unmeasuredCount -= branchNode.unmeasuredCount;\n          node.children[bix] = null;\n        } else {\n          const unmeasuredCount = bix === oldBranchIndex ?\n                oldNextIndex + 1 : branchCapacity;\n          sizeDelta.unmeasuredCount -= unmeasuredCount;\n        }\n      }\n      const nodeOldNextIndex = newBranchIndex === oldBranchIndex ?\n            oldNextIndex : branchCapacity - 1;\n      const nextNode = node.children[newBranchIndex];\n      if (nextNode instanceof _Node) {\n        const subtreeDelta = this._reduceNodes(\n              nextNode, newNextIndex, nodeOldNextIndex, level - 1);\n        //node.sumMeasuredSize[newBranchIndex] += subtreeDelta.measuredSize;\n        //node.sumUnmeasuredCount[newBranchIndex] += subtreeDelta.unmeasuredCount;\n        sizeDelta.measuredSize += subtreeDelta.measuredSize;\n        sizeDelta.unmeasuredCount += subtreeDelta.unmeasuredCount;\n      } else {\n        const unmeasuredCountDelta = nodeOldNextIndex - newNextIndex;\n        sizeDelta.unmeasuredCount -= unmeasuredCountDelta;\n      }\n    }\n    node.measuredSize += sizeDelta.measuredSize;\n    node.unmeasuredCount += sizeDelta.unmeasuredCount;\n    if (newBranchIndex < node.lastAccumulatedIndex) {\n      node.lastAccumulatedIndex = newBranchIndex;\n    }\n    return sizeDelta;\n  }\n  \n  _releaseUnusedLevels(newItemCount: number, newRootLevel: number) {\n    for (let lix = this._rootLevel; lix > newRootLevel; lix--) {\n      if (!(this._rootNode instanceof _Node)) {\n        this._rootNode = this._rootNode.children[0];\n      } else {\n        this._rootNode = new _Node(newItemCount, this._maxBranches);\n        break;\n      }\n    }\n  }\n\n  _setItemSize(\n    node: _Node, \n    index: number, \n    level: number, \n    size: number | null,\n    capacityCap: number\n  ): SizeDelta {\n    let sizeDelta: SizeDelta;\n    if (level === 0) {\n      const child = node.children[index];\n      const oldSize = child instanceof _Node ? null : child;\n      node.children[index] = size;\n      sizeDelta = {\n            size, oldSize, measuredSize: 0, unmeasuredCount: 0};\n      if (isFiniteNumber(oldSize) && typeof oldSize === 'number') {\n        sizeDelta.measuredSize -= oldSize;\n      } else {\n        sizeDelta.unmeasuredCount--;\n        sizeDelta.oldSize = null;\n      }\n      if (isFiniteNumber(size) && typeof size === 'number') {\n        sizeDelta.measuredSize += size;\n      } else {\n        sizeDelta.unmeasuredCount++;\n      }\n      if (oldSize !== size && node.lastAccumulatedIndex >= index) {\n        node.lastAccumulatedIndex = index - Number(index > 0);\n      }\n    } else {\n      const branchCapacity = this._branchCapacities[level];\n      const branchIndex = Math.trunc(index / branchCapacity);\n      const priorCapacity = branchIndex * branchCapacity;\n      const nextIndex = index - priorCapacity;\n      const nextCapacityCap = capacityCap - priorCapacity;\n      let nextNode = node.children[branchIndex];\n      if (!(nextNode instanceof _Node) && size === null) {\n        sizeDelta = {size, oldSize: null, measuredSize: 0, unmeasuredCount: 0};\n      } else {\n        if (!(nextNode instanceof _Node)) {\n          if (level === 1) {\n            nextNode = new _Node(Math.min(\n              this._branchCapacities[level],\n              nextCapacityCap\n            ), this._maxLeafItems);\n          } else {\n            nextNode = new _Node(Math.min(\n              this._branchCapacities[level],\n              nextCapacityCap\n            ), this._maxBranches);\n          }\n          node.children[branchIndex] = nextNode;\n        }\n        sizeDelta = this._setItemSize(nextNode, nextIndex, level - 1,\n              size, nextCapacityCap);\n      }\n      if ((sizeDelta.measuredSize !== 0 || sizeDelta.unmeasuredCount !== 0) &&\n            node.lastAccumulatedIndex >= branchIndex) {\n        node.lastAccumulatedIndex = branchIndex - Number(branchIndex > 0);\n      }\n    }\n    node.measuredSize += sizeDelta.measuredSize;\n    node.unmeasuredCount += sizeDelta.unmeasuredCount;\n    return sizeDelta;\n  }\n\n}\n\nexport default PositionTracker;\n\n","// @flow\n// Copyright (c) 2020, David Cary, MIT License\n\nimport PositionTracker from './PositionTracker.js';\n\nexport type ScrollAlignment = 'start' | 'center' | 'end';\n\nclass ScrollPosition {\n  _index: number;\n  _alignment: ScrollAlignment;\n  _offset: number;\n\n  constructor(\n    index: number =0,\n    alignment: ScrollAlignment ='start',\n    offset: number=0\n  ) {\n    if (index < 0) {\n      index = 0;\n    }\n    this._index = index;\n    if (['start', 'center', 'end'].indexOf(alignment) === -1) {\n      alignment = 'start';\n    }\n    this._alignment = alignment;\n    this._offset = offset;\n  }\n\n  copy(): ScrollPosition {\n    const result = new ScrollPosition(this._index, this._alignment,\n          this._offset);\n    return result;\n  }\n\n  /**\n   * Keeps the same item index,\n   * but changes alignment, then adjusts offset\n   * in order to produce an equivalent total offset\n   */\n  changeAlignment(\n    alignment: ScrollAlignment,\n    positionTracker: PositionTracker,\n    viewSize: number\n  ): ScrollPosition {\n    const totalOffset = this.getTotalOffset(\n          positionTracker, viewSize);\n    const newPosition = new ScrollPosition(\n          this._index, alignment, this._offset);\n    const newTotalOffset = newPosition.getTotalOffset(\n          positionTracker, viewSize);\n    const originalAlignment = this.getAlignment();\n    let viewDelta = 0;\n    if (alignment === 'end' && originalAlignment === 'start') {\n      viewDelta = viewSize;\n    } else if ((alignment === 'center' && originalAlignment === 'start') ||\n          (alignment === 'end' && originalAlignment === 'center')) {\n      viewDelta = viewSize / 2;\n    } else if ((alignment === 'start' && originalAlignment === 'center') ||\n          (alignment === 'center' && originalAlignment === 'end')) {\n      viewDelta = - viewSize / 2;\n    } else if (alignment === 'start' && originalAlignment === 'end') {\n      viewDelta = - viewSize;\n    }\n    const offsetDelta = totalOffset + viewDelta - newTotalOffset;\n    newPosition._offset += offsetDelta;\n    return newPosition;\n  }\n\n  getAlignment(): ScrollAlignment {\n    return this._alignment;\n  }\n\n  getAlignedOffset(): number {\n    return this._offset;\n  }\n\n  getIndex(): number {\n    return this._index;\n  }\n\n  /**\n   * returns the corresponding offset in the context of the arguments\n   */\n  getTotalOffset(positionTracker: PositionTracker,\n        viewSize: number): number {\n    const itemStats = positionTracker.getItemStats(this._index);\n    let offsetDelta = 0;\n    if (this._alignment === 'center') {\n      offsetDelta = Math.min(itemStats.size, viewSize) / 2;\n    } else if (this._alignment === 'end') {\n      offsetDelta = itemStats.size;\n    }\n    const totalSize = positionTracker.getTotalSize();\n    const rawTotalOffset = itemStats.start + offsetDelta + this._offset;\n    const totalOffset = Math.max(0, Math.min(rawTotalOffset, totalSize));\n    return totalOffset;\n  }\n\n  getViewStartOffset(\n    positionTracker: PositionTracker,\n    viewSize: number\n  ): number {\n    let offsetDelta = 0;\n    const totalOffset = this.getTotalOffset(positionTracker, viewSize);\n    if (this._alignment === 'center') {\n      offsetDelta = Math.min(0, - viewSize / 2);\n    } else if (this._alignment === 'end') {\n      offsetDelta = - viewSize;\n    }\n    const totalSize = positionTracker.getTotalSize();\n    let viewStartOffset = Math.max(0, Math.min(\n          totalOffset + offsetDelta, totalSize));\n    return viewStartOffset;\n  }\n\n  incrementOffset(offsetDelta: number): ScrollPosition {\n    if (isNaN(offsetDelta) || !isFinite(offsetDelta)) {\n      offsetDelta = 0;\n    }\n    const result = new ScrollPosition(this._index, this._alignment,\n          this._offset + offsetDelta);\n    return result;\n  }\n\n  update(\n    index: number =0,\n    alignment: ScrollAlignment ='start',\n    offset: number=0\n  ): void {\n    this._index = index;\n    this._alignment = alignment;\n    this._offset = offset;\n  }\n\n  updateFrom(\n    scrollPosition: ScrollPosition,\n  ): void {\n    this._index = scrollPosition.getIndex();\n    this._alignment = scrollPosition.getAlignment();\n    this._offset = scrollPosition.getAlignedOffset();\n  }\n\n  /**\n   * Produces a new ScrollPosition that has the same alignment, but\n   * changes the item index and alignment offset so that the total\n   * offset is the same and is within the item of the new index.\n   *\n   * If the original total offset was outside the extent of the\n   * positionTracker, the new ScrollPosition points to the start of the\n   * first item or the end of the last item, which ever is nearest.\n   *\n   * If the total offset is on the boundary of two items one of the items\n   * is chosen so that with a preserved alignment of 'start' or 'end',\n   * the offset is zero.  If the alignment is 'middle', the sign of the offset\n   * is preserved.\n   */\n  withContainingIndex(\n    positionTracker: PositionTracker,\n    viewSize: number\n  ): ScrollPosition {\n    let newPosition: ScrollPosition;\n    let totalOffset = this.getTotalOffset(\n          positionTracker, viewSize);\n    if (totalOffset < 0) {\n      totalOffset = 0;\n    }\n    const totalSize = positionTracker.getTotalSize();\n    if (totalOffset > totalSize) {\n      totalOffset = totalSize;\n    }\n    if (totalOffset === 0) {\n      newPosition = new ScrollPosition(0, 'start', 0);\n    } else if (totalOffset === totalSize) {\n      newPosition = new ScrollPosition(\n            positionTracker.getItemCount() - 1, 'end', 0);\n    } else {\n      const containingIndex = positionTracker.getContainingIndex(totalOffset);\n      newPosition = new ScrollPosition(\n            containingIndex, 'start', 0);\n      const newTotalOffset = newPosition.getTotalOffset(\n            positionTracker, viewSize);\n      newPosition._alignment = this._alignment;\n      let offsetDelta = totalOffset - newTotalOffset;\n      if (offsetDelta === 0) {\n        if (this._alignment === 'end' &&\n            containingIndex > 0) {\n          newPosition._index--;\n          newPosition._alignment = 'end';\n        } else if (this._alignment === 'center') {\n          newPosition._alignment = 'center';\n          if (this._offset > 0 && containingIndex > 0) { \n            newPosition._index--;\n          }\n        }\n      }\n      const revisedTotalOffset = newPosition.getTotalOffset(\n          positionTracker, viewSize);\n      offsetDelta = totalOffset - revisedTotalOffset;\n      newPosition._offset = offsetDelta;\n    }\n    return newPosition;\n  }\n\n}\n\nexport default ScrollPosition;\n","// @flow\n\n// Animation frame based implementation of setTimeout.\n// Inspired by Joe Lambert, https://gist.github.com/joelambert/1002116#file-requesttimeout-js\n\nconst hasNativePerformanceNow =\n  typeof performance === 'object' && typeof performance.now === 'function';\n\nconst now = hasNativePerformanceNow\n  ? () => performance.now()\n  : () => Date.now();\n\nexport type TimeoutID = {|\n  id: AnimationFrameID,\n|};\n\nexport function cancelTimeout(timeoutID: TimeoutID) {\n  cancelAnimationFrame(timeoutID.id);\n}\n\nexport function requestTimeout(callback: Function, delay: number): TimeoutID {\n  const start = now();\n\n  function tick() {\n    if (now() - start >= delay) {\n      callback.call(null);\n    } else {\n      timeoutID.id = requestAnimationFrame(tick);\n    }\n  }\n\n  const timeoutID: TimeoutID = {\n    id: requestAnimationFrame(tick),\n  };\n\n  return timeoutID;\n}\n","// @flow\n\nlet size: number = -1;\n\n// This utility copied from \"dom-helpers\" package.\nexport function getScrollbarSize(recalculate?: boolean = false): number {\n  if (size === -1 || recalculate) {\n    const div = document.createElement('div');\n    const style = div.style;\n    style.width = '50px';\n    style.height = '50px';\n    style.overflow = 'scroll';\n\n    ((document.body: any): HTMLBodyElement).appendChild(div);\n\n    size = div.offsetWidth - div.clientWidth;\n\n    ((document.body: any): HTMLBodyElement).removeChild(div);\n  }\n\n  return size;\n}\n\nexport type RTLOffsetType =\n  | 'negative'\n  | 'positive-descending'\n  | 'positive-ascending';\n\nlet cachedRTLResult: RTLOffsetType | null = null;\n\n// TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n// Chrome does not seem to adhere; its scrollLeft values are positive (measured relative to the left).\n// Safari's elastic bounce makes detecting this even more complicated wrt potential false positives.\n// The safest way to check this is to intentionally set a negative offset,\n// and then verify that the subsequent \"scroll\" event matches the negative offset.\n// If it does not match, then we can assume a non-standard RTL scroll implementation.\nexport function getRTLOffsetType(recalculate?: boolean = false): RTLOffsetType {\n  if (cachedRTLResult === null || recalculate) {\n    const outerDiv = document.createElement('div');\n    const outerStyle = outerDiv.style;\n    outerStyle.width = '50px';\n    outerStyle.height = '50px';\n    outerStyle.overflow = 'scroll';\n    outerStyle.direction = 'rtl';\n\n    const innerDiv = document.createElement('div');\n    const innerStyle = innerDiv.style;\n    innerStyle.width = '100px';\n    innerStyle.height = '100px';\n\n    outerDiv.appendChild(innerDiv);\n\n    ((document.body: any): HTMLBodyElement).appendChild(outerDiv);\n\n    if (outerDiv.scrollLeft > 0) {\n      cachedRTLResult = 'positive-descending';\n    } else {\n      outerDiv.scrollLeft = 1;\n      if (outerDiv.scrollLeft === 0) {\n        cachedRTLResult = 'negative';\n      } else {\n        cachedRTLResult = 'positive-ascending';\n      }\n    }\n\n    ((document.body: any): HTMLBodyElement).removeChild(outerDiv);\n\n    return cachedRTLResult;\n  }\n\n  return cachedRTLResult;\n}\n","\n// @flow\n\nimport React from 'react';\n\nimport {show} from './utils.js';\n\nclass ErrBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, info) {\n    console.debug(\"In ErrorBoundary: error=\"+show(error));\n    console.debug(\"In ErrorBoundary: info=\"+show(info));\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return <p>Something went wrong.</p>;\n    }\n    return this.props.children; \n  }\n}\n\nexport default ErrBoundary;\n","\n// @flow\n// Copyright (c) 2020, David Cary, MIT License\n\nimport React from 'react';\nimport { createElement } from 'react';\nimport { cancelTimeout, requestTimeout } from './timer';\nimport { getScrollbarSize, getRTLOffsetType } from './domHelpers';\nimport PositionTracker from './PositionTracker.js';\nimport ScrollPosition from './ScrollPosition.js';\nimport ErrBoundary from './ErrBoundary';\nimport { isFiniteNumber, isFiniteNumberBetween } from './utils';\n\nimport type { TimeoutID } from './timer';\n\ntype Direction = 'ltr' | 'rtl';\n\ntype ColumnClassNameFunction = number => string;\ntype ColumnClassName = string |\n  ColumnClassNameFunction |\n  Array<string>;\n\ntype ColumnWidthFunction = number => (string | number | null);\ntype ColumnWidth = string | number | null |\n  ColumnWidthFunction |\n  Array<string | number | null>;\n\ntype Style = {[key: string]: string | number};\ntype ColumnStyleFunction = number => Style;\ntype ColumnStyle = Style | Array<Style> | ColumnStyleFunction;\n\n\n\ntype RenderComponentProps<T> = {|\n  columnIndex: number,\n  data: T,\n  isScrolling?: boolean,\n  rowIndex: number,\n  style: Object,\n|};\n\ntype RenderComponent<T> = React$ComponentType<\n  $Shape<RenderComponentProps<T>>\n>;\n\n\ntype ScrollEvent = SyntheticEvent<HTMLDivElement>;\ntype Actions = {[name: string]: (any) => (any)} | {unmount: null};\n\nexport type Props = {|\n  children?: any,\n  columnClassName?: ColumnClassName,\n  columnCountInitial?: number,\n  columnPositionInitial?: ScrollPosition,\n  columnStyle?: ColumnStyle,\n  columnTracker?: PositionTracker | number,\n  columnWidth?: ColumnWidth,\n  dataArray?: Array<any>,\n  //direction?: Direction,\n  itemKey?: (rowIndex: number, columnIndex: number | string) => string,\n  overscanRowCount?: number,\n  rowCountInitial?: number,\n  rowPositionInitial?: ScrollPosition,\n  rowTracker?: PositionTracker,\n  viewId?: string,\n  viewClassName?: string,\n  viewHeightInitial?: number | string,\n  viewStyle?: Style,\n  viewWidthInitial?: number | string,\n|};\n\ntype State = {|\n  instance: any,\n  isScrolling: boolean,\n  rowPosition: ScrollPosition,\n  columnPosition: ScrollPosition,\n|};\n\ntype ViewDimensions = {\n  height: number,\n  innerHeight: number,\n  innerWidth: number,\n  width: number,\n};\n\ntype ItemRange = {|\n  start: number,\n  end: number\n|};\n\ntype ReactDivRef = {current: HTMLDivElement | null};\ntype GridContainers = {\n  domView: HTMLDivElement,\n  domBase: HTMLDivElement,\n  domRendered: HTMLDivElement\n};\n\nconst IS_SCROLLING_DEBOUNCE_INTERVAL = 150;\nconst DEFAULT_VIEW_HEIGHT = 0;\nconst DEFAULT_VIEW_WIDTH = 0;\nconst EQUAL_HEIGHT_THRESHOLD = 0.01\n\nconst defaultItemKey = (\n  columnIndex: number,\n  rowIndex: number | string\n  ) => `(${rowIndex}:${columnIndex})`;\n\nexport default\nclass MeasuredGrid extends React.Component<Props, State> {\n  _columnClassNameSaved: ColumnClassName = '';\n  _columnClassNameFunction: ColumnClassNameFunction | null = null;\n  _columnCountInitial: any;\n  _columnStyleSaved: ColumnStyle | null = null;\n  _columnStyleFunction: ColumnStyleFunction | null = null;\n  _columnTracker: PositionTracker;\n  _columnWidthSaved: ColumnWidth = null;\n  _columnWidthFunction: ColumnWidthFunction | null = null;\n  _dataArray: Array<any> | null;\n  _dataArrayLengthSaved: number | null;\n  _gridbaseRef: ReactDivRef = React.createRef();\n  _isMounted = false;\n  _lastScrollTop: number = 0;\n  _lastScrollLeft: number = 0;\n  _renderedRef: ReactDivRef = React.createRef();\n  _renderedRowRange : ItemRange = {start: 0, end: 0};\n  _resetIsScrollingTimeoutId: TimeoutID | null = null;\n  _rowCountInitial: any;\n  _rowTracker: PositionTracker;\n  _totalWidth: number;\n  _viewDimensions : ViewDimensions;\n  _viewRef: ReactDivRef = React.createRef();\n  _visibleRowRange : ItemRange = {start: 0, end: 0};\n\n \n  static defaultProps = {\n    //direction: 'ltr',\n    columnClassName: '',\n    columnStyle: null,\n    columnWidth: null,\n    columnPositionInitial: new ScrollPosition(),\n    rowPositionInitial: new ScrollPosition(),\n    overscanRowCount: 1,\n    viewStyle: {},\n    itemKey: defaultItemKey,\n  };\n\n  constructor(props: Props) {\n    super(props);\n    if (this.props.rowTracker instanceof PositionTracker) {\n      this._rowTracker = this.props.rowTracker;\n    } else {\n      let rowCount = this.props.rowCountInitial;\n      this._rowCountInitial = rowCount;\n      if (!isFiniteNumberBetween(rowCount, 0, Infinity)) {\n        rowCount = 0;\n      }\n      if (Array.isArray(this.props.dataArray)) {\n        rowCount = this.props.dataArray.length;\n      }\n      this._rowTracker = new PositionTracker(rowCount);\n    }\n    if (this.props.columnTracker instanceof PositionTracker) {\n      this._columnTracker = this.props.columnTracker;\n    } else {\n      let columnCount = this.props.columnCountInitial;\n      this._columnCountInitial = columnCount;\n      if (!isFiniteNumberBetween(columnCount, 0, Infinity)) {\n        columnCount = 1;\n      }\n      this._columnTracker = new PositionTracker(columnCount);\n    }\n\n    let rowPosition = this.props.rowPositionInitial;\n    if (!(rowPosition instanceof ScrollPosition) ||\n          rowPosition.getIndex() < 0) {\n      rowPosition = new ScrollPosition();\n    }\n    const rowItemCount = this._rowTracker.getItemCount(); \n    if (rowPosition.getIndex() >= rowItemCount) {\n      rowPosition = new ScrollPosition(\n            rowItemCount ? rowItemCount - 1 : 0, 'end', 0);\n    }\n    let columnPosition = this.props.columnPositionInitial;\n    if (columnPosition.getIndex() < 0) {\n      columnPosition = new ScrollPosition();\n    }\n    const columnItemCount = this._columnTracker.getItemCount(); \n    if (columnPosition.getIndex() >= columnItemCount) {\n      columnPosition = new ScrollPosition(\n            columnItemCount ? columnItemCount - 1 : 0, 'end', 0);\n    }\n      \n    this._totalWidth = this._getTotalWidth();\n    const viewHeight = isFiniteNumberBetween(\n          this.props.viewHeightInitial, 0) ?\n          this.props.viewHeightInitial : undefined;\n    const viewWidth = isFiniteNumberBetween(\n          this.props.viewWidthInitial, 0) ?\n          this.props.viewWidthInitial : undefined;\n    this._viewDimensions = {\n      height: viewHeight,\n      innerHeight: viewHeight,\n      innerWidth: viewWidth,\n      width: viewWidth,\n    };\n\n    this.state = {\n      isScrolling: false,\n      rowPosition: rowPosition,\n      columnPosition: columnPosition,\n      instance: this,\n    }\n  }\n\n  static getDerivedStateFromProps(\n    nextProps: Props,\n    prevState: State\n  ): $Shape<State> | null {\n\n    const that = prevState.instance;\n    if (nextProps.rowTracker instanceof PositionTracker) {\n      that._rowTracker = nextProps.rowTracker;\n    } else if (!(that._rowTracker instanceof PositionTracker)) {\n      let rowCount = that._rowCountInitial;\n      if (!isFiniteNumberBetween(rowCount, 0, Infinity)) {\n        rowCount = 0;\n      }\n      if (Array.isArray(nextProps.dataArray)) {\n        rowCount = nextProps.dataArray.length;\n      }\n      that._rowTracker = new PositionTracker(rowCount);\n    }\n    if (nextProps.columnTracker instanceof PositionTracker) {\n      that._columnTracker = nextProps.columnTracker;\n    } else if (!(that._columnTracker instanceof PositionTracker)) {\n      let columnCount = that._columnCountInitial;\n      that._columnCountInitial = columnCount;\n      if (!isFiniteNumberBetween(columnCount, 0, Infinity)) {\n        columnCount = 1;\n      }\n      that._columnTracker = new PositionTracker(columnCount);\n    }\n    if (Array.isArray(nextProps.dataArray) &&\n          nextProps.dataArray.length !== that._rowTracker.getItemCount()) {\n      that._rowTracker.setItemCount(nextProps.dataArray.length);\n    }\n    const nbrRows = that._rowTracker.getItemCount();\n    let rowResult = null;\n    const rowIndex = prevState.rowPosition.getIndex();\n    if ((nbrRows === 0 && rowIndex > 0) ||\n          (nbrRows > 0 && rowIndex >= nbrRows)) {\n      rowResult = {rowPosition: nbrRows ?\n            new ScrollPosition(nbrRows - 1, 'end', 0) :\n            new ScrollPosition(0, 'start', 0)\n            };\n    }\n    const nbrColumns = that._columnTracker.getItemCount();\n    let columnResult = null;\n    const columnIndex = prevState.columnPosition.getIndex();\n    if ((nbrColumns === 0 && columnIndex > 0) ||\n          (nbrColumns > 0 && columnIndex >= nbrColumns)) {\n      columnResult = {columnPosition: nbrColumns ?\n            new ScrollPosition(nbrColumns - 1, 'end', 0) :\n            new ScrollPosition(0, 'start', 0)\n            };\n    }\n    let result = null;\n    if (rowResult || columnResult) {\n      result = Object.assign({}, rowResult || {}, columnResult || {});\n    }\n    return result;\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n\n    const gridContainers: GridContainers | null = this._findGridContainers();\n    if (gridContainers) {\n      this._measureColumns(gridContainers);\n      this._adjustColumnPositioning(gridContainers);\n      this._measureRows(gridContainers);\n      this._adjustRowPositioning(gridContainers);\n    }\n  }\n\n  componentDidUpdate() {\n    const gridContainers: GridContainers | null = this._findGridContainers();\n    if (gridContainers) {\n      this._measureColumns(gridContainers);\n      this._adjustColumnPositioning(gridContainers);\n      this._measureRows(gridContainers);\n      this._adjustRowPositioning(gridContainers);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this._resetIsScrollingTimeoutId !== null) {\n      cancelTimeout(this._resetIsScrollingTimeoutId);\n    }\n    this._isMounted = false;\n  }\n\n  getScrollPositions(): {\n    column: ScrollPosition,\n    isScrolling: boolean,\n    row: ScrollPosition,\n  } {\n    const result = {\n      row: this.state.rowPosition.copy(),\n      column: this.state.columnPosition.copy(),\n      isScrolling: this.state.isScrolling,\n    }\n    return result;\n  }\n\n  positionAt(rowPosition?: ScrollPosition, columnPosition?: ScrollPosition): void {\n    this._viewDimensions = this._getViewDimensions();\n    const viewHeight = this._viewDimensions.innerHeight;\n    const viewWidth = this._viewDimensions.innerWidth;\n\n    const newColumnPosition = columnPosition ?\n          columnPosition :\n          //columnPosition.withContainingIndex(this._columnTracker, viewWidth):\n          this.state.columnPosition;\n    const newRowPosition = rowPosition ?\n          rowPosition :\n          //rowPosition.withContainingIndex(this._rowTracker, viewHeight):\n          this.state.rowPosition;\n    this.setState({rowPosition: newRowPosition, columnPosition: newColumnPosition});\n  }      \n\n  render() {\n    const {\n      children,\n      columnStyle,\n      columnWidth,\n      //direction,\n      itemKey,\n      viewClassName,\n      viewStyle,\n    } = this.props;\n    const {\n      isScrolling,\n      rowPosition,\n    } = this.state;\n    const direction = 'ltr';\n\n    const rowTracker = this._rowTracker;\n    const columnTracker = this._columnTracker;\n\n    this._totalWidth = this._getTotalWidth();\n    this._viewDimensions = this._getViewDimensions();\n    const [\n      columnStartIndex,\n      columnStopIndex,\n    ] = this._getColumnRangeToRender();\n    const [\n      renderRowStart,\n      renderRowStop\n    ] = this._getRowRangeToRender(\n          rowPosition, this._viewDimensions.innerHeight || 0);\n\n    const columnCount = columnTracker.getItemCount();\n    let rowCount = rowTracker.getItemCount();\n    this._checkColumnClassNameFunction();\n    this._checkColumnStyleFunction();\n    const useDataArray = Array.isArray(this.props.dataArray) &&\n          children === undefined;\n\n    const rows = [];\n    const viewDimensionStyle = {};\n    if (this.props.viewStyle && this.props.viewStyle.width !== undefined) {\n      viewDimensionStyle.width = this.props.viewStyle.width;\n    } else if (isFiniteNumberBetween(this._viewDimensions.width, 0, Infinity)) {\n      viewDimensionStyle.width = this._viewDimensions.width;\n    }\n    if (this.props.viewStyle && this.props.viewStyle.height !== undefined) {\n      viewDimensionStyle.height = this.props.viewStyle.height;\n    } else if (isFiniteNumberBetween(this._viewDimensions.height, 0, Infinity)) {\n      viewDimensionStyle.height = this._viewDimensions.height;\n    }\n    if (columnCount > 0 && rowCount) {\n      for (\n        let rowIndex = renderRowStart;\n        rowIndex <= renderRowStop;\n        rowIndex++\n      ) {\n        const cells = [];\n        for (\n          let columnIndex = columnStartIndex;\n          columnIndex <= columnStopIndex;\n          columnIndex++\n        ) {\n          let cellStyle: Style = {};\n          cellStyle.display = 'inline-block';\n          cellStyle.boxSizing = 'border-box';\n          const cellColumnStyle = this._columnStyleFunction(columnIndex);\n          Object.assign(cellStyle, cellColumnStyle);\n          const cellStyleWidth = this._columnWidthFunction(columnIndex);\n          if (typeof cellStyleWidth === 'number' ||\n                typeof cellStyleWidth === 'string') {\n            cellStyle.width = cellStyleWidth;\n          }\n          let cellClassName = this._columnClassNameFunction(columnIndex);\n          cellClassName = typeof cellClassName === 'string' ? cellClassName : '';\n          const cellKey = (itemKey && typeof itemKey === 'function' ?\n                itemKey : defaultItemKey)(rowIndex, columnIndex);\n          let child: any;\n          if (typeof children === 'function') {\n            child = children(rowIndex, columnIndex, isScrolling);\n          } else if (useDataArray) {\n            child = this._childrenFromDataArray(rowIndex, columnIndex);\n          } else {\n            child = children;\n          }\n          const cell = createElement(\n            'div',\n            {\n              className: 'grid-cell ' +\n                (cellClassName === '' ? '' : ' ' + cellClassName),\n              columnindex: columnIndex,\n              key: cellKey,\n              datakey: cellKey,\n              style: cellStyle,\n            },\n            <ErrBoundary>\n              { child }\n            </ErrBoundary>\n          );\n          cells.push(cell);\n        }\n        const rowKey = (itemKey && typeof itemKey === 'function' ?\n              itemKey : defaultItemKey)(rowIndex, 'row');\n        const row = createElement('div', {\n            rowindex: rowIndex,\n            className: 'grid-row '+ (rowIndex % 2 ? 'odd' : 'even'),\n            key: rowKey,\n            datakey: rowKey,\n            style: {boxSizing: 'border-box'},\n            },\n            cells\n        );\n        rows.push(<ErrBoundary key={\"errboundry-\"+rowIndex}>{row}</ErrBoundary>);\n      }\n    }\n\n    const startRowOffset = rowTracker.getItemStats(\n          renderRowStart).start;\n\n    const baseStyle = {\n          position: 'relative',\n          boxSizing: 'border-box',\n          overflow: 'auto',\n          WebkitOverflowScrolling: 'touch',\n          willChange: 'transform',\n          direction,\n        };\n    const fullViewStyle:any = Object.assign({}, baseStyle,\n          viewDimensionStyle, viewStyle);\n\n    const result = createElement(\n      'div',\n      {\n        id: this.props.viewId,\n        className: 'grid-view' + (viewClassName ? ' ' + viewClassName : ''),\n        ref: this._viewRef,\n        style: fullViewStyle,\n        onScroll: evt => this._onScroll(evt),\n        onClick: evt => this._onResize(evt),\n      },\n      createElement(\n        'div',\n        {\n          ref: this._gridbaseRef,\n          className: 'grid-base',\n          style: {\n            position: 'relative',\n            height: rowTracker.getTotalSize(),\n            pointerEvents: isScrolling ? 'none' : undefined,\n            width: this._totalWidth,\n          },\n        },\n        createElement(\n          'div',\n          {\n            ref: this._renderedRef,\n            className: 'rendered-rows',\n            style: {\n              position: 'absolute',\n              top: startRowOffset,\n            },\n          },\n          rows\n        )\n      )\n    );\n    return (\n      <ErrBoundary>\n        {result}\n      </ErrBoundary>\n    );\n  }\n\n  _adjustColumnPositioning(gridContainers: GridContainers) {\n    const columnTracker = this._columnTracker;\n    const {columnPosition} = this.state;\n    const {domView, domBase, domRendered} = gridContainers;\n\n    const viewScrollLeft = domView.scrollLeft;\n    this._viewDimensions = this._getViewDimensions();\n    const viewWidth = this._viewDimensions.innerWidth;\n    const maxGridOffset = Math.max(0, this._totalWidth - viewWidth);\n    let viewLeftGridOffset = columnPosition.getViewStartOffset(\n          columnTracker, viewWidth);\n    if (viewLeftGridOffset > maxGridOffset) {\n      columnPosition.update(columnTracker.getItemCount() - 1, 'end', 0);\n      viewLeftGridOffset = columnPosition.getViewStartOffset(\n            columnTracker, viewWidth);\n    }\n    if (viewLeftGridOffset < 0) {\n      columnPosition.update(0, 'start', 0);\n      viewLeftGridOffset = columnPosition.getViewStartOffset(\n            columnTracker, viewWidth);\n    }\n    let viewRightGridOffset = viewLeftGridOffset + viewWidth;\n\n    if (this.state.isScrolling) {\n    } else {\n      if (viewScrollLeft !== viewLeftGridOffset) {\n        domView.scrollLeft = viewLeftGridOffset;\n      }\n    }\n    const newWidth = this._totalWidth + 'px';\n    if (domBase.style.width !== newWidth) {\n      domBase.style.width = this._totalWidth + 'px';\n    }\n    this._lastScrollLeft = domView.scrollLeft;\n  }\n\n  _adjustRowPositioning(gridContainers: GridContainers) {\n    const rowTracker = this._rowTracker;\n    const columnTracker = this._columnTracker;\n    const rowPosition = this.state.rowPosition;\n\n    const {domView, domBase, domRendered} = gridContainers;\n    const viewScrollTop = domView.scrollTop;\n    this._viewDimensions = this._getViewDimensions();\n    const viewHeight = this._viewDimensions.innerHeight;\n    const firstRenderedIndex = this._renderedRowRange.start;\n    const firstRenderedRowStats = rowTracker\n          .getItemStats(firstRenderedIndex);\n    const lastRenderedRow = this._renderedRowRange.end;\n    const lastRenderedRowStats = rowTracker\n          .getItemStats(lastRenderedRow);\n    const totalHeight = rowTracker.getTotalSize();\n    const maxGridOffset = totalHeight - viewHeight;\n    let viewTopGridOffset = rowPosition.getViewStartOffset(\n          rowTracker, viewHeight);\n    if (viewTopGridOffset > maxGridOffset) {\n      rowPosition.update(rowTracker.getItemCount() - 1, 'end', 0);\n      viewTopGridOffset = rowPosition.getViewStartOffset(\n            rowTracker, viewHeight);\n    }\n    if (viewTopGridOffset < 0) {\n      rowPosition.update(0, 'start', 0);\n      viewTopGridOffset = rowPosition.getViewStartOffset(\n            rowTracker, viewHeight);\n    }\n    let viewBottomGridOffset = viewTopGridOffset + viewHeight;\n\n    if (this.state.isScrolling) {\n      const adjustedRenderedRowsTop = viewScrollTop -\n            (viewTopGridOffset - firstRenderedRowStats.start);\n      const newTop = adjustedRenderedRowsTop + 'px';\n      if (domRendered.style.top !== newTop) {\n        domRendered.style.top = adjustedRenderedRowsTop + 'px';\n      }\n    } else {\n      const newTop =  firstRenderedRowStats.start + 'px';\n      if (domRendered.style.top !== newTop) {\n        domRendered.style.top = firstRenderedRowStats.start + 'px';\n      }\n      if (domRendered.style.top !== viewTopGridOffset) {\n      domView.scrollTop = viewTopGridOffset;\n      }\n    }\n    domBase.style.height = totalHeight + 'px';\n\n    this._lastScrollTop = domView.scrollTop;\n    const nbrRowItems = rowTracker.getItemCount();\n    if (nbrRowItems > 0 && lastRenderedRowStats.end < viewBottomGridOffset - 0.0001 &&\n          (this._renderedRowRange.start > 0 ||\n          this._renderedRowRange.end < nbrRowItems - 1)) {\n      this.setState({rowPosition: rowPosition.copy()});\n    }\n  }\n\n  _checkColumnClassNameFunction() {\n    if (this._columnClassNameFunction === null ||\n          this._columnClassNameSaved !== this.props.columnClassName) {\n      this._columnClassNameSaved = this.props.columnClassName;\n      this._columnClassNameFunction = this._makeClassNameFunction(\n            this._columnClassNameSaved);\n    }\n  }\n\n  _checkColumnStyleFunction() {\n    if (this._columnStyleFunction === null ||\n          this._columnStyleSaved !== this.props.columnStyle) {\n      this._columnStyleSaved = this.props.columnStyle;\n      this._columnStyleFunction = this._makeStyleFunction(\n            this._columnStyleSaved);\n    }\n  }\n\n  _checkColumnWidthFunction() {\n    if (this._columnWidthFunction === null ||\n          this._columnWidthSaved !== this.props.columnWidth) {\n      this._columnWidthSaved = this.props.columnWidth;\n      this._columnWidthFunction = this._makeWidthFunction(\n            this._columnWidthSaved);\n    }\n  }\n\n  _childrenFromDataArray(rowIndex: number, columnIndex: number): string {\n    let result = '';\n    const dataArray = this.props.dataArray;\n    if (Array.isArray(dataArray)) {\n      const rowData: any = dataArray[rowIndex];\n      if (Array.isArray(rowData)) {\n        const cellData: any = rowData[columnIndex];\n        if (cellData !== undefined) {\n          result = String(cellData);\n        }\n      }\n    }\n    return result;\n  }\n\n  _findGridContainers(): GridContainers | null {\n    let domView = this._getDomRef(this._viewRef); \n    let domBase = this._getDomRef(this._gridbaseRef);\n    let domRendered = this._getDomRef(this._renderedRef);\n\n    if (!domView) {\n      console.error('ERROR: No view found at this._viewRef.');\n    }\n    if (!domBase) {\n      console.error('ERROR: No grid base found at this._gridbaseRef.');\n    }\n    if (!domRendered) {\n      console.error('ERROR: No rendered rows found at this._renderedRef.');\n    }\n    let result;\n    if (domView === null || domBase === null || domRendered === null) {\n      result = null;\n    } else {\n      result = {domView, domBase, domRendered};\n    }\n    return result;\n  }\n\n  _forceUpdate() {\n      this.forceUpdate()\n  }\n\n  _getColumnRangeToRender(): [number, number, number, number] {\n    const columnCount = this._columnTracker.getItemCount();\n    const result = [0, columnCount - 1, 0, columnCount - 1];\n    return result;\n  }\n\n  _getDomRef(ref: ReactDivRef): HTMLDivElement | null {\n    if (ref && ref.current) {\n      const div: HTMLDivElement = (ref.current);\n      return div;\n    }\n    return null;\n  }\n\n  _getIncrementedPosition(\n    scrollPosition: ScrollPosition,\n    scrollDelta: number,\n    positionTracker: PositionTracker,\n    viewSize: number\n  ): ScrollPosition {\n    const newAlignment = scrollDelta < 0 ? 'end' : 'start';\n    const realignedPosition = scrollPosition.changeAlignment(\n          newAlignment, positionTracker, viewSize);\n    let referencePosition = realignedPosition.incrementOffset(\n          scrollDelta);\n    const newPosition = referencePosition.withContainingIndex(\n          positionTracker, viewSize);\n    if (Math.abs(scrollDelta) <= viewSize) {\n      referencePosition = newPosition;\n    }\n    return newPosition;\n  }\n\n  _getRowRangeToRender(\n    rowPosition : ScrollPosition,\n    viewHeight : number\n  ): [number, number, number, number] {\n    const overscanRowCount = this.props.overscanRowCount;\n    const rowTracker = this._rowTracker;\n    const columnTracker = this._columnTracker;\n\n    const overscanRowCountNbr = typeof overscanRowCount === 'number' ? overscanRowCount : 1;\n    const columnCount = columnTracker.getItemCount();\n    const rowCount = rowTracker.getItemCount();\n\n    if (columnCount === 0 || rowCount === 0) {\n      this._visibleRowRange = {start: 0, end: -1};\n      this._renderedRowRange = {start: 0, end: -1};\n      return [0, -1, 0, -1];\n    }\n\n    this._visibleRowRange = this._getVisibleRowRange(\n      rowTracker,\n      rowPosition,\n      viewHeight,\n    );\n    this._renderedRowRange = {\n      start: Math.max(0, this._visibleRowRange.start - overscanRowCountNbr),\n      end: Math.min(\n        rowCount - 1,\n        this._visibleRowRange.end + overscanRowCountNbr\n      ),\n    };\n    \n    const result = [\n      this._renderedRowRange.start,\n      this._renderedRowRange.end,\n      this._visibleRowRange.start,\n      this._visibleRowRange.end\n    ];\n    return result;\n  }\n\n  _getTotalWidth(): number {\n    const {\n      columnWidth,\n    } = this.props;\n    const columnTracker = this._columnTracker;\n    this._checkColumnWidthFunction();\n    const columnCount = columnTracker.getItemCount();\n    let totalWidth = 0;\n    for (let columnIndex = 0; columnIndex < columnCount; columnIndex++) {\n      let cellWidth = this._columnWidthFunction(columnIndex);\n      if (cellWidth === null) {\n        cellWidth = columnTracker.getItemSize(columnIndex);\n      } else {\n        columnTracker.setItemSize(columnIndex, cellWidth);\n      }\n      totalWidth += cellWidth;\n    }\n    return totalWidth;\n  }\n\n  _getViewDimensions(): ViewDimensions {\n    const result = Object.assign({}, this._viewDimensions);\n    const scrollbarSize = getScrollbarSize();\n    if (this._isMounted) {\n      const domView = this._getDomRef(this._viewRef);\n      if (domView) {\n        const viewRect = domView.getBoundingClientRect();\n        if (viewRect) {\n          result.width = Math.abs(viewRect.right - viewRect.left);\n          result.height = Math.abs(viewRect.bottom - viewRect.top);\n          const totalHeight = this._rowTracker.getTotalSize();\n          const totalWidth =  this._totalWidth;\n          const verticalScrollbarSize = \n                totalHeight > result.height ? scrollbarSize :\n                totalHeight < result.height - scrollbarSize ? 0:\n                totalWidth > result.width ? scrollbarSize : 0;\n          const horizontalScrollbarSize = \n                totalWidth > result.width ? scrollbarSize :\n                totalWidth < result.width - scrollbarSize ? 0:\n                totalHeight > result.height ? scrollbarSize : 0;\n          let otherUnusedHeight = 0;\n          let otherUnusedWidth = 0;\n          const viewStyle = window.getComputedStyle(domView);\n          if (viewStyle) {\n            otherUnusedHeight += this._getStyleSize(viewStyle, 'border-top-width');\n            otherUnusedHeight += this._getStyleSize(viewStyle, 'border-bottom-width');\n            otherUnusedHeight += this._getStyleSize(viewStyle, 'padding-top');\n            otherUnusedHeight += this._getStyleSize(viewStyle, 'padding-bottom');\n            otherUnusedWidth += this._getStyleSize(viewStyle, 'border-left-width');\n            otherUnusedWidth += this._getStyleSize(viewStyle, 'border-right-width');\n            otherUnusedWidth += this._getStyleSize(viewStyle, 'padding-left');\n            otherUnusedWidth += this._getStyleSize(viewStyle, 'padding-right');\n\n          }\n\n          \n          result.innerWidth = result.width - verticalScrollbarSize - otherUnusedWidth;\n          result.innerHeight = result.height - horizontalScrollbarSize -\n                otherUnusedHeight;\n        }\n      }\n    }\n    return result;\n  }\n\n  _getStyleSize(style: any, name: string): number {\n    let result = 0;\n    const value = style.getPropertyValue(name);\n    if (typeof value !== 'string') {\n      return result;\n    }\n    let parsed = parseFloat(value);\n    if (typeof parsed === 'number' && !isNaN(parsed)) {\n      result = parsed;\n    }\n    return result;\n  }\n\n  _getVisibleRowRange(\n    rowTracker: PositionTracker,\n    scrollPosition: ScrollPosition,\n    viewHeight: number\n    ) : ItemRange {\n\n    const rowCount = rowTracker.getItemCount();\n    const viewTop = Math.max(0, scrollPosition.getViewStartOffset(\n          rowTracker, viewHeight));\n    const totalOffset = scrollPosition.getTotalOffset(rowTracker,\n          viewHeight);\n    const totalHeight = rowTracker.getTotalSize();\n    const viewBottom = Math.min(totalHeight,\n          viewTop + viewHeight);\n    let rootIndex = scrollPosition.getIndex();\n    let rootStats = rowTracker.getItemStats(rootIndex);\n    if (totalOffset >= 0 && totalOffset <= totalHeight &&\n          (totalOffset < rootStats.start || totalOffset > rootStats.end)) {\n      const rootPosition = scrollPosition.withContainingIndex(\n            rowTracker, viewHeight);\n      rootIndex = rootPosition.getIndex();\n      rootStats = rowTracker.getItemStats(rootIndex);\n    }\n    let visibleRange = {\n      start: rootIndex,\n      end: rootIndex,\n    };\n    let startIndex = rootIndex - 1;\n    let startBottom = rootStats.start;\n    while (startBottom > viewTop && startIndex >= 0) {\n      visibleRange.start = startIndex;\n      startBottom -= rowTracker.getItemLowSize(startIndex);\n      startIndex--;\n    }\n    let endIndex = rootIndex + 1;\n    let endTop = rootStats.end;\n    while (endTop <= viewBottom && endIndex < rowCount) {\n      visibleRange.end = endIndex;\n      endTop += rowTracker.getItemLowSize(endIndex);\n      endIndex++;\n    }\n    let rangeHeight = endTop - startBottom;\n    if (rangeHeight < viewHeight) {\n      if (visibleRange.end === rowCount - 1) {\n        while (rangeHeight < viewHeight && startIndex >= 0) {\n          visibleRange.start = startIndex;\n          startBottom -= rowTracker.getItemLowSize(startIndex);\n          startIndex--;\n          rangeHeight = endTop - startBottom;\n        }\n      }\n      if (visibleRange.start === 0) {\n        while (rangeHeight < viewHeight && endIndex < rowCount) {\n          visibleRange.end = endIndex;\n          endTop += rowTracker.getItemLowSize(endIndex);\n          endIndex++;\n          rangeHeight = endTop - startBottom;\n        }\n      }\n    }\n    return visibleRange;\n  }\n\n  _makeClassNameFunction(className: mixed): ColumnClassNameFunction {\n    let classFunction: (number) => any;\n    if (Array.isArray(className)) {\n      classFunction = (index: number) => {\n        let result = '';\n        if (index < className.length) {\n          result = className[index];\n        } else if (className.length > 0) {\n          result = className[className.length - 1];\n        }\n        return result;\n      };\n    } else if (typeof className === 'function') {\n      classFunction = className;\n    } else {\n      if (typeof className !== 'string') {\n        className = '';\n      }\n      classFunction = (index: number) => className;\n    }\n    return (index: number) => {\n      const raw = classFunction(index);\n      return typeof raw === 'string' ? raw : '';\n    };\n  }\n\n  _makeStyleFunction(style: mixed): ColumnStyleFunction {\n    let styleFunction: (number) => any;\n    if (Array.isArray(style)) {\n      styleFunction = (index: number) => {\n        let result = {};\n        if (index < style.length) {\n          result = style[index];\n        } else if (style.length > 0) {\n          result = style[style.length - 1];\n        }\n        return result;\n      };\n    } else if (typeof style === 'function') {\n      styleFunction = style;\n    } else {\n      styleFunction = (index: number) => style;\n    }\n    return (index: number) => {\n      const raw = styleFunction(index);\n      return (typeof raw === 'object' && raw !== undefined) ?\n            raw : {};\n    }\n  }\n\n  _makeWidthFunction(width: mixed): ColumnWidthFunction {\n    let widthFunction: (number) => any;\n    if (Array.isArray(width)) {\n      widthFunction = (index: number) => {\n        let result = null;\n        if (index < width.length) {\n          result = width[index];\n        } else if (width.length > 0) {\n          result = width[width.length - 1];\n        }\n        return result;\n      };\n    } else if (typeof width === 'function') {\n      widthFunction = width;\n    } else {\n      widthFunction = (index: number) => width;\n    }\n    return (index: number) => {\n      const raw = widthFunction(index);\n      return (typeof raw === 'number' ||\n            typeof raw === 'string' || raw === null) ?\n            raw : null;\n    }\n  }\n\n  _measureColumns(gridContainers: GridContainers) {\n    const {domView, domBase, domRendered} = gridContainers;\n\n    const columnTracker = this._columnTracker;\n    const columnWidth = this.props.columnWidth;\n    let totalWidth = 0;\n    let columnCount = 0;\n    if (domRendered.children.length > 0) {\n      const measuredRow = domRendered.children[0];\n      columnCount = measuredRow.children.length;\n      const lastcix = measuredRow.children.length - 1;\n      for(let cix = 0; cix < measuredRow.children.length; cix++) {\n        const columnCell = measuredRow.children[cix];\n        const cellRect = columnCell.getBoundingClientRect();\n        const measuredWidth = Math.abs(cellRect.right - cellRect.left);\n        const givenCellWidth = this._columnWidthFunction(cix);\n        if (typeof givenCellWidth === 'number') {\n          if (measuredWidth !== givenCellWidth) {\n            console.error('ERROR: Column width discrepancy:'+\n                  ' measured ('+measuredWidth+') !=='+\n                  ' prop columnWidth ('+givenCellWidth+')'+\n                  ' for columnIndex='+cix);\n          }\n        }\n        totalWidth += measuredWidth;\n        columnTracker.setItemSize(cix, measuredWidth)\n      }\n    }\n    this._totalWidth = totalWidth;\n  }\n\n  _measureRows(gridContainers: GridContainers) {\n    const {domRendered} = gridContainers;\n\n    const rowTracker = this._rowTracker;\n\n    let rowIndexStart = -99;\n    let rowIndexEnd = -99;\n    const lastrix = domRendered.children.length - 1;\n    for(let rix = 0; rix < domRendered.children.length; rix++) {\n      const row = domRendered.children[rix];\n      let rowIndex = -1;\n      if (row.hasAttribute('rowindex')) {\n        rowIndex = Number(row.attributes['rowindex'].value);\n      }\n      if (rix === 0) {\n        rowIndexStart = rowIndex;\n      }\n      rowIndexEnd = rowIndex;\n      if (rowIndex >= 0) {\n        const rowRect = row.getBoundingClientRect();\n        const rowHeight = Math.abs(rowRect.bottom - rowRect.top);\n        const oldRowHeight = rowTracker.setItemSize(rowIndex, rowHeight);\n      }\n    }\n  }\n\n  _onResize = (event: ScrollEvent): void => {\n      const newViewDimensions = this._getViewDimensions();\n      if (newViewDimensions.height !== this._viewDimensions.height ||\n            newViewDimensions.width !== this._viewDimensions.width) {\n        this._forceUpdate();\n      }\n  }\n\n  _onScroll = (event: ScrollEvent): void => {\n    const {\n      clientHeight,\n      clientWidth,\n      scrollLeft,\n      scrollTop,\n      scrollHeight,\n      scrollWidth,\n    } = event.currentTarget;\n    this._totalWidth = this._getTotalWidth();\n    const rowTracker = this._rowTracker;\n    const columnTracker = this._columnTracker;\n\n    this._viewDimensions = this._getViewDimensions();\n    const viewHeight = this._viewDimensions.innerHeight;\n    const viewWidth = this._viewDimensions.innerWidth;\n\n    //const { direction } = this.props;\n    const direction = 'ltr';\n    // TRICKY According to the spec, scrollLeft should be negative for\n    // RTL aligned elements. This is not the case for all browsers\n    // though (e.g. Chrome reports values as positive, measured relative\n    // to the left).  It's also easier for this component if we convert\n    // offsets to the same format as they would be in for ltr.\n    // So the simplest solution is to determine which browser behavior\n    // we're dealing with, and convert based on it.\n    let calculatedScrollLeft = scrollLeft;\n    if (direction === 'rtl') {\n      switch (getRTLOffsetType()) {\n        case 'negative':\n          calculatedScrollLeft = -scrollLeft;\n          break;\n        case 'positive-descending':\n          calculatedScrollLeft = scrollWidth - clientWidth - scrollLeft;\n          break;\n        default:\n      }\n    }\n\n    // Prevent Safari's elastic scrolling from causing visual shaking\n    // when scrolling past bounds.\n    calculatedScrollLeft = Math.max(0,\n          Math.min(calculatedScrollLeft, scrollWidth - clientWidth));\n    const calculatedScrollTop = Math.max(0,\n          Math.min(scrollTop, scrollHeight - clientHeight));\n\n    const newColumnPosition = this._getIncrementedPosition(\n          this.state.columnPosition,\n          calculatedScrollLeft - this._lastScrollLeft,\n          columnTracker, viewWidth);\n    const newRowPosition = this._getIncrementedPosition(\n          this.state.rowPosition,\n          calculatedScrollTop - this._lastScrollTop,\n          rowTracker, viewHeight);\n\n    const needRender = this._isRenderNeeded({\n      calculatedScrollLeft,\n      calculatedScrollTop,\n      columnTracker,\n      newColumnPosition,\n      newRowPosition,\n      rowTracker,\n      scrollLeft,\n      scrollTop,\n      viewHeight,\n      viewWidth,\n    });\n    if (!needRender) {\n      this._lastScrollTop = scrollTop;\n      this._lastScrollLeft = scrollLeft;\n      this.state.columnPosition.updateFrom(newColumnPosition);\n      this.state.rowPosition.updateFrom(newRowPosition);\n    } else {\n      this.setState(prevState => {\n        return {\n          isScrolling: true,\n          columnPosition: newColumnPosition,\n          rowPosition: newRowPosition,\n          //scrollUpdateWasRequested: false,\n        };\n      }, this._resetIsScrollingDebounced);\n    }\n  }\n\n  _isRenderNeeded(\n    {\n      calculatedScrollLeft,\n      calculatedScrollTop,\n      columnTracker,\n      newColumnPosition,\n      newRowPosition,\n      rowTracker,\n      scrollLeft,\n      scrollTop,\n      viewHeight,\n      viewWidth,\n    }:\n    {\n      calculatedScrollLeft: number,\n      calculatedScrollTop: number,\n      columnTracker: PositionTracker,\n      newColumnPosition: ScrollPosition,\n      newRowPosition: ScrollPosition,\n      rowTracker: PositionTracker,\n      scrollLeft: number,\n      scrollTop: number,\n      viewHeight: number,\n      viewWidth: number,\n    }\n  ): boolean {\n    let isNeeded = true;\n    const newViewTop = Math.trunc(newRowPosition.getViewStartOffset(\n          rowTracker, viewHeight));\n    const newViewLeft = Math.trunc(newColumnPosition.getViewStartOffset(\n          columnTracker, viewWidth));\n    const renderedRowStartOffset = rowTracker.getItemStats(\n          this._renderedRowRange.start).start;\n    const renderedRowEndOffset = rowTracker.getItemStats(\n          this._renderedRowRange.end).end;\n    const newViewBottom = newViewTop + viewHeight;\n    const newViewRight = newViewLeft + viewWidth;\n    if (renderedRowStartOffset <= newViewTop &&\n          renderedRowEndOffset >= newViewBottom) {\n      isNeeded = false;\n    }\n    return isNeeded;\n  }\n\n  _resetIsScrolling = () => {\n    this._resetIsScrollingTimeoutId = null;\n    this.setState({ isScrolling: false });\n  }\n\n  _resetIsScrollingDebounced = () => {\n    if (this._resetIsScrollingTimeoutId !== null) {\n      cancelTimeout(this._resetIsScrollingTimeoutId);\n    }\n\n    this._resetIsScrollingTimeoutId = requestTimeout(\n      this._resetIsScrolling,\n      IS_SCROLLING_DEBOUNCE_INTERVAL\n    );\n  };\n\n}\n\n","var quotes = [\n  {\"attribution\": \"Maya Angelou\", \"quote\": \"I've learned that people will forget what you said, people will forget what you did, but people will never forget how you made them feel.\"},\n  {\"attribution\": \"Will Rogers\", \"quote\": \"Good judgment comes from experience, and a lot of that comes from bad judgment.\"},\n  {\"attribution\": \"Swami Vivekananda\", \"quote\": \"Take up one idea. Make that one idea your life - think of it, dream of it, live on that idea. Let the brain, muscles, nerves, every part of your body, be full of that idea, and just leave every other idea alone. This is the way to success.\"},\n  {\"attribution\": \"Thomas Edison\", \"quote\": \"I failed my way to success.\"},\n  {\"attribution\": \"Alice Walker\", \"quote\": \"The most common way people give up their power is by thinking they don’t have any.\"},\n  {\"attribution\": \"George Washington\", \"quote\": \"It is far better to be alone, than to be in bad company.\"},\n  {\"attribution\": \"Thomas Jefferson\", \"quote\": \"My most earnest wish is to see the republican element of popular control pushed to the maximum of its practicable exercise. I shall then believe that our government may be pure and perpetual.\"},\n  {\"attribution\": \"Elizabeth I\", \"quote\": \"Words are leaves, the substance consists of deeds, which are the true fruits of a good tree.\"},\n  {\"attribution\": \"Lao Tzu\", \"quote\": \"The journey of a thousand miles begins with one step.\"},\n  {\"attribution\": \"Socrates\", \"quote\": \"An unexamined life is not worth living.\"},\n  {\"attribution\": \"George Clooney\", \"quote\": \"I had to stop going to auditions thinking, ‘Oh, I hope they like me.’ I had to go in thinking I was the answer to their problem.\"},\n  {\"attribution\": \"Madeleine L'Engle\", \"quote\": \"Because you're not what I would have you be / I blind myself to who, in truth, you are.\"},\n  {\"attribution\": \"Thomas Jefferson\", \"quote\": \"Honesty is the first chapter in the book of wisdom.\"},\n  {\"attribution\": \"John D. Rockefeller Jr.\", \"quote\": \"The secret of success is to do the common thing uncommonly well.\"},\n  {\"attribution\": \"Milton Berle\", \"quote\": \"If opportunity doesn't knock, build a door.\"},\n  {\"attribution\": \"Napoleon\", \"quote\": \"Never ascribe to malice, that which can be explained by incompetence.\"},\n  {\"attribution\": \"Augustine of Hippo\", \"quote\": \"The world is a book, and those who do not travel read only a page\"},\n  {\"attribution\": \"Steve Jobs\", \"quote\": \"Your time is limited, so don't waste it living someone else's life. Don't be trapped by dogma -- which is living with the results of other people's thinking.\"},\n  {\"attribution\": \"Harry S. Truman\", \"quote\": \"If you can’t convince them, confuse them.\"},\n  {\"attribution\": \"Margaret Mead\", \"quote\": \"Always remember that you are absolutely unique. Just like everyone else.\"},\n  {\"attribution\": \"Gertrude Atherton\", \"quote\": \"The human mind has an infinite capacity for self-deception.\"},\n  {\"attribution\": \"Thomas Jefferson\", \"quote\": \"I find that the harder I work, the more luck I seem to have.\"},\n  {\"attribution\": \"Zig Ziglar\", \"quote\": \"Don't be distracted by criticism. Remember -- the only taste of success some people get is to take a bite out of you.\"},\n  {\"attribution\": \"Rainer Maria Rilke\", \"quote\": \"The only journey is the one within.\"},\n  {\"attribution\": \"Ernest Naville\", \"quote\": \"In a democratic government, the right of decision belongs to the majority, but the right of representation belongs to all.\"},\n  {\"attribution\": \"Helen Keller\", \"quote\": \"The best and most beautiful things in the world cannot be seen or even touched - they must be felt with the heart.\"},\n  {\"attribution\": \"Colin R. Davis\", \"quote\": \"The road to success and the road to failure are almost exactly the same.\"},\n  {\"attribution\": \"Benjamin Franklin\", \"quote\": \"Tell me and I forget. Teach me and I remember. Involve me and I learn.\"},\n  {\"attribution\": \"Blaise Pascal\", \"quote\": \"I have made this letter longer than usual because I lack the time to make it shorter.\"},\n  {\"attribution\": \"Buddha\", \"quote\": \"Do not dwell in the past, do not dream of the future, concentrate the mind on the present moment.\"},\n  {\"attribution\": \"Audrey Hepburn\", \"quote\": \"Nothing is impossible, the word itself says 'I'm possible'!\"},\n  {\"attribution\": \"Henry Ford\", \"quote\": \"When everything seems to be going against you, remember that the airplane takes off against the wind, not with it.\"},\n  {\"attribution\": \"Vincent van Gogh\", \"quote\": \"I would rather die of passion than of boredom.\"},\n  {\"attribution\": \"Rene Descartes\", \"quote\": \"I think, therefore, I am.\"},\n  {\"attribution\": \"Jesus Christ\", \"quote\": \"A new command I give you: Love one another. As I have loved you, so you must love one another.\"},\n  {\"attribution\": \"Aristotle\", \"quote\": \"It is during our darkest moments that we must focus to see the light.\"},\n  {\"attribution\": \"Henry David Thoreau\", \"quote\": \"Be true to your work, your word, and your friend.\"},\n  {\"attribution\": \"John Adams\", \"quote\": \"That it may be the interest of this assembly to do strict justice at all times, it should be an equal representation, or, in other words, equal interests among the people should have equal interests in it. Great care should be taken to effect this.\"},\n  {\"attribution\": \"Nelson Mandela\", \"quote\": \"The greatest glory in living lies not in never falling, but in rising every time we fall.\"},\n  {\"attribution\": \"Sondra Anice Barnes\", \"quote\": \"It's so hard when I have to, and so easy when I want to.\"},\n  {\"attribution\": \"Aristotle\", \"quote\": \"First, have a definite, clear practical ideal; a goal, an objective. Second, have the necessary means to achieve your ends; wisdom, money, materials, and methods. Third, adjust all your means to that end.\"},\n  {\"attribution\": \"Winston Churchill\", \"quote\": \"Success is walking from failure to failure with no loss of enthusiasm.\"},\n  {\"attribution\": \"Mae West\", \"quote\": \"You only live once, but if you do it right, once is enough.\"},\n  {\"attribution\": \"Leonora O'Reilly\", \"quote\": \"In the early days of our Republic the questions asked of each office seeker were, 'Is he honest? Is he capable? Is he faithful to the constitution?' In our present diseased state, the one question asked of an office seeker is, 'Is he faithful to the party?'\"},\n  {\"attribution\": \"Franklin D. Roosevelt\", \"quote\": \"When you reach the end of your rope, tie a knot in it and hang on.\"},\n  {\"attribution\": \"James M. Barrie\", \"quote\": \"Life is a long lesson in humility.\"},\n  {\"attribution\": \"Ralph Waldo Emerson\", \"quote\": \"The only person you are destined to become is the person you decide to be.\"},\n  {\"attribution\": \"Euripides\", \"quote\": \"Friends show their love in times of trouble, not in happiness.\"},\n  {\"attribution\": \"Alexander Graham Bell\", \"quote\": \"Before anything else, preparation is the key to success.\"},\n  {\"attribution\": \"Dorothy Cottrell\", \"quote\": \"If you are going to do something that will annoy people, tell them about it afterwards; then they will only be annoyed that you have done it, and won't have all the exasperation of trying to stop you.\"},\n  {\"attribution\": \"Marcel Proust\", \"quote\": \"The real voyage of discovery consists not in seeking new lands but seeing with new eyes.\"},\n  {\"attribution\": \"Lillian Smith\", \"quote\": \"All the movements in the world, all the laws, the drives, the edicts will never do what personal relationships can do and must do.\"},\n  {\"attribution\": \"Albert Einstein\", \"quote\": \"Insanity: doing the same thing over and over again and expecting different results\"},\n  {\"attribution\": \"Edmund Burke\", \"quote\": \"The only thing necessary for the triumph of evil is for good men to do nothing.\"},\n  {\"attribution\": \"John F. Kennedy\", \"quote\": \"Too often we enjoy the comfort of opinion without the discomfort of thought.\"},\n  {\"attribution\": \"Ralph Waldo Emerson\", \"quote\": \"Do not go where the path may lead, go instead where there is no path and leave a trail.\"},\n  {\"attribution\": \"Elizabeth Gaskell\", \"quote\": \"I sometimes think there's two sides to the commandment; and that we may say, 'Let others do unto you, as you would do unto them,' for pride often prevents our giving others a great deal of pleasure, in not letting them be kind, when their hearts are longing to help ...\"},\n  {\"attribution\": \"Margaret Thatcher\", \"quote\": \"It is exciting to have a real crisis on your hands, when you have spent half your political life dealing with humdrum issues like the environment.\"},\n  {\"attribution\": \"Hans Christian Andersen\", \"quote\": \"Life itself is the most wonderful fairy tale.\"},\n  {\"attribution\": \"Lao-Tze\", \"quote\": \"Watch your thoughts; they become words.\\nWatch your words; they become actions.\\nWatch your actions; they become habits.\\nWatch your habits; they become character.\\nWatch your character; it becomes your destiny.\"},\n  {\"attribution\": \"Mother Teresa\", \"quote\": \"Spread love everywhere you go. Let no one ever come to you without leaving happier.\"},\n  {\"attribution\": \"George Orwell\", \"quote\": \"Happiness can exist only in acceptance.\"},\n  {\"attribution\": \"Coco Chanel\", \"quote\": \"The most courageous act is still to think for yourself. Aloud.\"},\n  {\"attribution\": \"Walt Whitman\", \"quote\": \"Keep your face always toward the sunshine - and shadows will fall behind you.\"},\n  {\"attribution\": \"Selma Lagerlöf\", \"quote\": \"More die in flight than in battle.\"},\n  {\"attribution\": \"Kathleen T. Norris\", \"quote\": \"If ambition doesn't hurt you, you haven't got it.\"},\n  {\"attribution\": \"Marcel Proust\", \"quote\": \"Let us be grateful to people who make us happy, they are the charming gardeners who make our souls blossom.\"},\n  {\"attribution\": \"Sigmund Freud\", \"quote\": \"Being entirely honest with oneself is a good exercise.\"},\n  {\"attribution\": \"Socrates\", \"quote\": \"The only true wisdom is in knowing you know nothing.\"},\n  {\"attribution\": \"Johann Sebastian Bach\", \"quote\": \"Ceaseless work, analysis, reflection, writing much, endless self-correction, that is my secret\"},\n  {\"attribution\": \"George Bernard Shaw\", \"quote\": \"Life isn't about finding yourself. Life is about creating yourself.\"},\n  {\"attribution\": \"Viktor E. Frankl\", \"quote\": \"When we are no longer able to change a situation - we are challenged to change ourselves.\"},\n  {\"attribution\": \"Aldous Huxley\", \"quote\": \"There is only one corner of the universe you can be certain of improving, and that's your own self.\"},\n  {\"attribution\": \"Francis of Assisi\", \"quote\": \"Lord, make me an instrument of thy peace. Where there is hatred, let me sow love.\"},\n  {\"attribution\": \"Leonardo da Vinci\", \"quote\": \"Learning never exhausts the mind.\"},\n  {\"attribution\": \"Theodore Roosevelt\", \"quote\": \"Believe you can and you're halfway there.\"},\n  {\"attribution\": \"George Sand\", \"quote\": \"There is only one happiness in this life, to love and be loved.\"},\n  {\"attribution\": \"William Shakespeare\", \"quote\": \"We know what we are, but know not what we may be.\"},\n  {\"attribution\": \"Fanny Fern\", \"quote\": \"Can anybody tell me why reporters, in making mention of lady speakers, always consider it to be necessary to report, fully and firstly, the dresses worn by them? When John Jones or Senator Rouser frees his mind in public, we are left in painful ignorance of the color and fit of his pants, coat, necktie and vest — and worse still, the shape of his boots. This seems to me a great omission.\"},\n  {\"attribution\": \"Soren Kierkegaard\", \"quote\": \"Life is not a problem to be solved, but a reality to be experienced.\"},\n  {\"attribution\": \"Carrie Chapman Catt\", \"quote\": \"To the wrongs that need resistance, / To the right that needs assistance, / To the future in the distance, / We give ourselves.\"},\n  {\"attribution\": \"Eleanor Roosevelt\", \"quote\": \"I can not believe that war is the best solution. No one won the last war, and no one will win the next war.\"},\n  {\"attribution\": \"Abigail Adams\", \"quote\": \"We have too many high sounding words, and too few actions that correspond with them.\"},\n  {\"attribution\": \"Baltasar Gracian\", \"quote\": \"A wise man gets more use from his enemies than a fool from his friends.\"},\n  {\"attribution\": \"Babe Ruth\", \"quote\": \"Never let the fear of striking out keep you from playing the game.\"},\n  {\"attribution\": \"Eleanor Roosevelt\", \"quote\": \"The future belongs to those who believe in the beauty of their dreams.\"},\n  {\"attribution\": \"Edith Wharton\", \"quote\": \"There are two ways of spreading light: to be the candle or the mirror that reflects it.\"},\n  {\"attribution\": \"Karl A. Menninger\", \"quote\": \"Love cures people - both the ones who give it and the ones who receive it.\"},\n  {\"attribution\": \"Ernest Hemingway\", \"quote\": \"But man is not made for defeat. A man can be destroyed but not defeated.\"},\n  {\"attribution\": \"Albert Einstein\", \"quote\": \"Life is like riding a bicycle. To keep your balance, you must keep moving\"},\n  {\"attribution\": \"Jane Wagner\", \"quote\": \"All my life I've always wanted to be somebody. But I see now I should have been more specific.\"},\n  {\"attribution\": \"Thomas A. Edison\", \"quote\": \"I have not failed. I've just found 10,000 ways that won't work.\"},\n  {\"attribution\": \"J. R. R. Tolkien\", \"quote\": \"Not all those who wander are lost.\"},\n  {\"attribution\": \"Martin Luther King, Jr.\", \"quote\": \"Life's most persistent and urgent question is, 'What are you doing for others?'\"},\n  {\"attribution\": \"Confucius\", \"quote\": \"Real knowledge is to know the extent of one’s ignorance\"},\n  {\"attribution\": \"Rosa Parks\", \"quote\": \"Many whites, even white Southerners told me that even though it may have seemed like the blacks were being freed (by my actions) they felt more free and at ease themselves. They thought that my action didn't just free blacks but them, too.\"},\n  {\"attribution\": \"Joseph Campbell\", \"quote\": \"Find a place inside where there's joy, and the joy will burn out the pain.\"},\n  {\"attribution\": \"Maya Angelou\", \"quote\": \"Try to be a rainbow in someone's cloud.\"},\n  {\"attribution\": \"Colin Powell\", \"quote\": \"There are no secrets to success. It is the result of preparation, hard work, and learning from failure.\"},\n  {\"attribution\": \"Sun Tzu\", \"quote\": \"The supreme art of war is to subdue the enemy without fighting.\"},\n  {\"attribution\": \"Oscar Wilde\", \"quote\": \"Keep love in your heart. A life without it is like a sunless garden when the flowers are dead.\"},\n  {\"attribution\": \"John Keats\", \"quote\": \"I love you the more in that I believe you had liked me for my own sake and for nothing else.\"},\n  {\"attribution\": \"Indira Gandhi\", \"quote\": \"You cannot shake hands with a clenched fist.\"},\n  {\"attribution\": \"Henry David Thoreau\", \"quote\": \"It's not what you look at that matters, it's what you see.\"},\n  {\"attribution\": \"Niccolo Machiavelli\", \"quote\": \"It is better to be feared than loved, if you cannot be both.\"},\n  {\"attribution\": \"P.D. James\", \"quote\": \"A politician is required to listen to humbug, talk humbug, condone humbug. The most we can hope for is that we don't actually believe it.\"},\n  {\"attribution\": \"Nellie McClung\", \"quote\": \"Disturbers are never popular — nobody ever really loved an alarm clock in action, no matter how grateful he may have been afterwards for its kind services!\"},\n  {\"attribution\": \"Shirley MacLaine\", \"quote\": \"To release others from the expectations we have of them is to really love them.\"},\n  {\"attribution\": \"Antoine de Saint-Exupéry\", \"quote\": \"Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away.\"},\n  {\"attribution\": \"Gandhi\", \"quote\": \"You must be the change you wish to see in the world.\"},\n  {\"attribution\": \"Ingrid Bergman\", \"quote\": \"A kiss is a lovely trick designed by nature to stop speech when words become superfluous.\"},\n  {\"attribution\": \"Plutarch\", \"quote\": \"What we achieve inwardly will change outer reality.\"},\n  {\"attribution\": \"Herman Melville\", \"quote\": \"It is better to fail in originality than to succeed in imitation.\"},\n  {\"attribution\": \"Rita Mae Brown\", \"quote\": \"I know that after all is said and done, more is said than done.\"},\n  {\"attribution\": \"Anne Frank\", \"quote\": \"How wonderful it is that nobody need wait a single moment before starting to improve the world.\"},\n  {\"attribution\": \"H. Jackson Brown, Jr.\", \"quote\": \"The best preparation for tomorrow is doing your best today.\"},\n  {\"attribution\": \"Aesop\", \"quote\": \"No act of kindness, no matter how small, is ever wasted.\"},\n  {\"attribution\": \"George Clooney\", \"quote\": \"You never really learn much from hearing yourself speak.\"},\n  {\"attribution\": \"Arlene Rankin\", \"quote\": \"The way in which we think of ourselves has everything to do with how our world see us and how we see ourselves successfully acknowledged by the world.\"},\n  {\"attribution\": \"Galileo Galilei\", \"quote\": \"You cannot teach a man anything; you can only help him find it within himself.\"},\n  {\"attribution\": \"Margaret Mead\", \"quote\": \"Never doubt that a small group of thoughtful, committed citizens can change the world; indeed, it's the only thing that ever has.\"},\n  {\"attribution\": \"Julius Caesar\", \"quote\": \"Experience is the teacher of all things.\"},\n  {\"attribution\": \"Nelson Mandela\", \"quote\": \"Education is the most powerful weapon which you can use to change the world.\"},\n  {\"attribution\": \"Satchel Paige\", \"quote\": \"Work like you don't need the money. Love like you've never been hurt. Dance like nobody's watching.\"},\n  {\"attribution\": \"Thomas Jefferson\", \"quote\": \"Honesty is the first chapter in the book of wisdom.\"},\n  {\"attribution\": \"Steve Jobs\", \"quote\": \"Stay hungry, stay foolish.\"},\n  {\"attribution\": \"New York City detective\", \"quote\": \"I’ve gone into hundreds of [fortune-teller’s parlors], and have been told thousands of things, but nobody ever told me I was a policewoman getting ready to arrest her.\"},\n  {\"attribution\": \"Confucius\", \"quote\": \"Everything has beauty, but not everyone sees it.\"},\n  {\"attribution\": \"Susan B. Anthony\", \"quote\": \"Independence is happiness.\"},\n  {\"attribution\": \"John Galsworthy\", \"quote\": \"Love has no age, no limit; and no death.\"},\n  {\"attribution\": \"George Eliot\", \"quote\": \"Our deeds still travel with us from afar, / And what we have been makes us what we are.\"},\n  {\"attribution\": \"Edward Everett Hale\", \"quote\": \"Coming together is a beginning; keeping together is progress; working together is success.\"},\n  {\"attribution\": \"Elizabeth Cady Stanton\", \"quote\": \"... the wrongs of society can be more deeply impressed on a large class of readers in the form of fiction than by essays, sermons, or the facts of science.\"},\n  {\"attribution\": \"Doris Stevens\", \"quote\": \"The Administration pinned its faith on jail — that institution of convenience to the oppressor when he is strong in power and his weapons are effective. When the oppressor miscalculates the strength of the oppressed, jail loses its convenience.\"},\n  {\"attribution\": \"John C. Maxwell\", \"quote\": \"A leader is one who knows the way, goes the way, and shows the way.\"},\n  {\"attribution\": \"Immanuel Kant\", \"quote\": \"Science is organized knowledge. Wisdom is organized life.\"},\n  {\"attribution\": \"Thomas Aquinas\", \"quote\": \"There is nothing on this earth more to be prized than true friendship.\"},\n  {\"attribution\": \"Voltaire\", \"quote\": \"Judge a man by his questions rather than his answers.\"},\n  {\"attribution\": \"Judy Garland\", \"quote\": \"For it was not into my ear you whispered, but into my heart. It was not my lips you kissed, but my soul.\"},\n  {\"attribution\": \"William Arthur Ward\", \"quote\": \"The pessimist complains about the wind; the optimist expects it to change; the realist adjusts the sails.\"},\n  {\"attribution\": \"Desmond Tutu\", \"quote\": \"You don't choose your family. They are God's gift to you, as you are to them.\"},\n  {\"attribution\": \"Laura Ingalls Wilder\", \"quote\": \"It does not so much matter what happens. It is what one does when it happens that really counts.\"},\n  {\"attribution\": \"Confucius\", \"quote\": \"Life is really simple, but we insist on making it complicated.\"},\n  {\"attribution\": \"Henry Ford\", \"quote\": \"Whether you think you can or you think you can't, you're right.\"},\n];\nexport default quotes;\n","// Copyright (c) 2020, David Cary, MIT License\n\nimport quotes from './quotes';\n\nfunction pickOneInWindow(items, windowBase, windowLength, shiftBy, pickState) {\n  const offset = Math.round(Math.abs(pickState)) % windowLength;\n  const choiceIndex = (windowBase + offset) % items.length;\n  const chosen = items[choiceIndex];\n  items[choiceIndex] = items[windowBase];\n  items[windowBase] = chosen;\n  const newWindowBase = (windowBase + shiftBy) % items.length;\n  return [chosen, newWindowBase, choiceIndex];\n}\n\nfunction getPairedQuotes(nbrRows) {\n  const result = [];\n  let quotesCopy = quotes.concat([]);\n  let windowBase = 1 - 1;\n  let windowLength = Math.trunc((quotesCopy.length + 1) / 2);\n  let shiftBy = 1;\n  let item;\n  let choiceIndex;\n  let prstate = 59383;\n  for (let seqNbr = 0; seqNbr < nbrRows; seqNbr++) {\n    prstate = (prstate * 1067 +  21419) % 568178;\n    [item, windowBase, choiceIndex]  = pickOneInWindow(quotesCopy, windowBase, windowLength, shiftBy, prstate >> 3);\n    const index2 = (choiceIndex + windowLength) % quotesCopy.length;\n    const item2 = quotesCopy[index2];\n    result.push([seqNbr, String(item.attribution), String(item.quote),\n          String(item2.attribution), String(item2.quote)]);\n  }\n  return result;\n}\n\nexport default getPairedQuotes;\n\n\n","/**/\n// Copyright (c) 2020, David Cary, MIT License\n\nimport React from 'react';\nimport {getPairedQuotes} from 'react-measured-grid';\nimport {MeasuredGrid} from 'react-measured-grid';\nimport {PositionTracker} from 'react-measured-grid';\nimport {ScrollPosition} from 'react-measured-grid';\n\nconst maxNbrRows = 137000;\nconst minQuoteExWidth = 10;\nconst maxQuoteExWidth = 2000;\nconst errorStyle = {backgroundColor: '#faa'}\n\nclass QuoteGrid extends React.Component {\n  columns = [\n    {width: null, className: 'col-seq'},\n    {width: null, className: 'col-attribution set1'},\n    {width: null, className: 'col-quote set1'},\n    {width: null, className: 'col-attribution set2'},\n    {width: 400, className: 'col-quote set2'},\n  ];\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      nbrRows: 85,\n      nbrRowsOK: true,\n      quoteExWidth: 45,\n      quoteExWidthUsed: 45,\n      quoteExWidthOK: true,\n      rowIndex: -1,\n      rowIndexOK: true,\n      alignment: 'end',\n      alignmentOK: true,\n      rowOffset: 0,\n      rowOffsetOK: true,\n      message: 'ok',\n    };\n    this.gridRef = React.createRef();\n    this.quoteData = getPairedQuotes(this.state.nbrRows);\n    this.rowTracker = new PositionTracker(this.quoteData.length, 55, 15);\n    this.rowPosition = new ScrollPosition();\n    this.columnTracker = new PositionTracker(this.columns.length, 80, 40);\n    this.columnPosition = new ScrollPosition();\n  }\n\n  gridCell = (rowIndex, columnIndex, isScrolling) => {\n    const row = this.quoteData[rowIndex];\n    const cell = (\n      <div>\n        {row[columnIndex]}\n      </div>\n    );  \n    return cell;\n  }\n\n  validateNbrRows(nbrRows) {\n    const value = Number(nbrRows);\n    let message = 'ok';\n    if (isNaN(value)) {\n      message = 'Error: Number of Rows is not a number.';\n    } else if (value < 0) {\n      message = 'Error: Number of Rows is less than zero.';\n    } else if (value >= maxNbrRows) {\n      message = `Error: Number of Rows is too big (>= ${maxNbrRows}).`;\n    } else if (!Number.isInteger(value)) {\n      message = 'Error: Number of Rows is not an integer.';\n    }\n    const isValid = message === 'ok';\n    return {nbrRows: value, message, nbrRowsOK: isValid};\n  }\n    \n  validateQuoteExWidth(quoteExWidth) {\n    const value = Number(quoteExWidth);\n    let message = 'ok';\n    if (isNaN(value)) {\n      message = 'Error: Quote Width is not a number.';\n    } else if (value < minQuoteExWidth) {\n      message = `Error: Quote Width is too small (< ${minQuoteExWidth})`;\n    } else if (value > maxQuoteExWidth) {\n      message = `Error: Quote Width is too big (> ${maxQuoteExWidth}).`;\n    }\n    const isValid = message === 'ok';\n    return {quoteExWidthUsed: value, message, quoteExWidthOK: isValid};\n  }\n\n  validateRowOffset(rowOffset) {\n    const value = Number(rowOffset);\n    let message = 'ok';\n    const maxOffset = maxNbrRows * 20;\n    if (isNaN(value)) {\n      message = 'Error: Offset is not a number.';\n    } else if (value < -maxOffset) {\n      message = `Error: Offset is too small (< ${-maxOffset})`;\n    } else if (value > maxOffset) {\n      message = `Error: Offset is too big (> ${maxOffset}).`;\n    }\n    const isValid = message === 'ok';\n    return {rowOffset: value, message, rowOffsetOK: isValid};\n  }\n\n  validateRowIndex(rowIndex) {\n    const value = Number(rowIndex);\n    let message = 'ok';\n    if (isNaN(value)) {\n      message = 'Error: Row Index is not a number.';\n    } else if (value < -this.quoteData.length) {\n      message = `Error: Row Index is too small (< ${-this.quoteData.length})`;\n    } else if (value >= this.quoteData.length) {\n      message = `Error: Row Index is too big (>= ${this.quoteData.length}).`;\n    } else if (!Number.isInteger(value)) {\n      message = 'Error: Row Index is not an integer.';\n    }\n    const isValid = message === 'ok';\n    return {rowIndex: value, message, rowIndexOK: isValid};\n  }\n    \n\n  dataResize() {\n    let {nbrRows, nbrRowsOK, message} = this.validateNbrRows(this.state.nbrRows);\n    const {quoteExWidthUsed, quoteExWidthOK, message: message2} =\n          this.validateQuoteExWidth(this.state.quoteExWidth);\n    if (nbrRowsOK && quoteExWidthOK) {\n      if (nbrRows !== this.quoteData.length) {\n        this.quoteData = getPairedQuotes(nbrRows);\n        this.rowTracker.setItemCount(nbrRows);\n      }\n    } else if (nbrRowsOK && !quoteExWidthOK) {\n      message = message2;\n    }\n    this.setState({nbrRows, nbrRowsOK, quoteExWidthUsed, quoteExWidthOK, message});\n  }\n\n  positionAt() {\n    let {rowIndex, rowIndexOK, message} = this.validateRowIndex(this.state.rowIndex);\n    const {rowOffset, rowOffsetOK, message2} = this.validateRowOffset(this.state.rowOffset);\n    const alignment = this.state.alignment; \n    \n    const itemCount = this.quoteData.length;\n    if (rowIndexOK && rowOffsetOK) {\n      const toRowIndex = rowIndex < 0 ?\n            itemCount + rowIndex :\n            rowIndex;\n      const rowPosition = new ScrollPosition(toRowIndex, alignment, rowOffset);\n      this.gridRef.current.positionAt(rowPosition);\n    } else if (rowIndexOK && !rowOffsetOK) {\n      message = message2;\n    }\n    this.setState({rowIndex, rowIndexOK, rowOffset, rowOffsetOK, message});\n  }\n\n  auditRowTracker() {\n    this.rowTracker.audit();\n  }\n\n  onChangeNbrRows(event) {\n    const nbrRows = event.target.value;\n    const {nbrRowsOK, message} = this.validateNbrRows(nbrRows);\n    this.setState({nbrRows, nbrRowsOK, message});\n  }\n\n  onChangeQuoteExWidth(event) {\n    const quoteExWidth = event.target.value;\n    const {quoteExWidthOK, message} = this.validateQuoteExWidth(quoteExWidth);\n    this.setState({quoteExWidth, quoteExWidthOK, message});\n  }\n\n  onChangeRowIndex(event) {\n    const rowIndex = event.target.value;\n    const {rowIndexOK, message} = this.validateRowIndex(rowIndex);\n    this.setState({rowIndex, rowIndexOK, message});\n  }\n\n  onChangeAlignment(event) {\n    const message = 'ok';\n    const alignmentOK = true;\n    const alignment = event.target.value;\n    this.setState({alignment, alignmentOK, message});\n  }\n\n  onChangeRowOffset(event) {\n    const rowOffset = event.target.value;\n    const {rowOffsetOK, message} = this.validateRowOffset(rowOffset);\n    this.setState({rowOffset, rowOffsetOK, message});\n  }\n\n  render() {\n    document.title='Demo1: MeasuredGrid';\n    return (\n      <div id=\"quote-grid\">\n        <h1>Demo 1: MeasuredGrid</h1>\n        <div id='intro' style={{maxWidth: '90ex'}}>\n          <p style={{marginBottom: '0.3em'}}>\n            This is a demo of a MeasuredGrid that displays pairs of quotes.\n            Quotes are listed with pseudorandom but fixed ordering and pairings.\n            You can use the inputs below to:\n          </p>\n          <ul style={{marginTop: '0.3em'}}>\n            <li>Change the number of rows in the grid.</li>\n            <li>Change the width of the first quote, using CSS in a dynamic style element.</li>\n            <li>Vertically reposition the grid with the attributes of a ScrollPosition instance.</li>\n            <li>Manually scroll horizontally and vertically.</li>\n            <li>Resize the view window.</li>\n          </ul>\n        </div>\n        <div id='quote-grid-message'\n              style={this.state.message.substr(0,5).toUpperCase() === \"ERROR\" ?\n                errorStyle : this.state.message === 'ok' ? {visibility: 'hidden'} : {}}\n              >{this.state.message}</div>\n        <table>\n          <tbody>\n            <tr id=\"resizing\">\n              <td>\n                <button id=\"resize\"\n                  onClick={event => this.dataResize()}\n                >Resize</button>\n              </td>\n              <td className=\"label\"> Number of Rows: </td>\n              <td>\n                <input id='nbr-rows' size='5' value={this.state.nbrRows}\n                  style={this.state.nbrRowsOK ? {} : errorStyle}\n                  onChange={event => this.onChangeNbrRows(event)}\n                />\n              </td>\n              <td className=\"label\"> Quote Width (ex): </td>\n              <td>\n                <input id='quote-width' size='3' value={this.state.quoteExWidth}\n                  style={this.state.quoteExWidthOK ? {} : errorStyle}\n                  onChange={event => this.onChangeQuoteExWidth(event)}\n                />\n              </td>\n            </tr>\n            <tr id=\"position-at\">\n              <td>\n                <button id=\"position-at\"\n                  onClick={event => this.positionAt()}\n                >Position At</button>\n              </td>\n              <td className=\"label\"> Row Index: </td>\n              <td>\n                <input id='rows-index' size='5' value={this.state.rowIndex}\n                  style={this.state.rowIndexOK ? {} : errorStyle}\n                  onChange={event => this.onChangeRowIndex(event)}\n                />\n              </td>\n              <td className=\"label\"> Alignment: </td>\n              <td>\n                <select id='alignment' value={this.state.alignment}\n                  onChange={event => this.onChangeAlignment(event)}\n                >\n                  <option value='start'>top</option>\n                  <option value='center'>center</option>\n                  <option value='end'>bottom</option>\n                </select>\n              </td>\n              <td className=\"label\"> Offset (px): </td>\n              <td>\n                <input id='row-offset' size='3' value={this.state.rowOffset}\n                  style={this.state.rowOffsetOK ? {} : errorStyle}\n                  onChange={event => this.onChangeRowOffset(event)}\n                />\n              </td>\n            </tr>\n          </tbody>\n        </table>\n\n        <style>\n          {\".col-quote.set1 { width: \"+(this.state.quoteExWidthUsed)+\"ex;}\"}\n        </style>\n        <MeasuredGrid\n          columnClassName={index => this.columns[index].className}\n          columnTracker={this.columnTracker}\n          columnPositionInitial={this.columnPosition}\n          columnWidth={index => this.columns[index].width}\n          ref={this.gridRef}\n          rowTracker={this.rowTracker}\n          rowPositionInitial={this.rowPosition}\n          viewId='quote-grid-view'\n        >\n          {(rowIndex, columnIndex, isScrolling) => this.gridCell(rowIndex, columnIndex, isScrolling)}\n        </MeasuredGrid>\n      </div>\n    );\n  }\n}\n\nexport default QuoteGrid;\n\n","import React from 'react';\nimport './App.css';\nimport QuoteGrid from './QuoteGrid.js';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          Paired Quotes grid with variable height rows.\n        </p>\n      </header>\n      <nav>\n        <div><a href='../..'>react-measured-grid API</a></div>\n        <div><a href='https://github.com/DavidCary/react-measured-grid'>repo</a></div>\n      </nav>\n      <main className=\"App-main\">\n        <QuoteGrid />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}